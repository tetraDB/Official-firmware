

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'digital_wide.bmp'.
//

const byte digital_wide_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x3a, 0x81, 0xb2, 0xf3, 0x04, 0x14, 0xd5, 0x04, 0x11, 0xe3, 0x02, 0x12, 0x31, 0x00, 0x3f, 
	0x00, 0x1d, 0x11, 0x22, 0x33, 0x44, 0x65, 0x06, 0x8a, 0x65, 0x94, 0x53, 0x22, 0x11, 0x00, 0x22, 
	0x00, 0x19, 0x11, 0x13, 0x14, 0x06, 0xb4, 0x15, 0x14, 0x13, 0x11, 0x00, 0x1c, 
	0x00, 0x17, 0x12, 0x15, 0x06, 0xbb, 0x15, 0x14, 0x12, 0x00, 0x19, 
	0x00, 0x15, 0x12, 0x15, 0x06, 0xc0, 0x15, 0x12, 0x00, 0x17, 
	0x00, 0x14, 0x14, 0x06, 0x21, 0x55, 0xb4, 0x03, 0x12, 0x02, 0x42, 0xc3, 0x54, 0x45, 0x06, 0x2a, 0x13, 0x00, 0x16, 
	0x00, 0x13, 0x15, 0xb6, 0x15, 0x14, 0x33, 0x52, 0x01, 0x95, 0xe2, 0x23, 0x14, 0x15, 0xa6, 0x15, 0x00, 0x15, 
	0x11, 0x70, 0x11, 0x70, 0x21, 0x15, 0x76, 0x15, 0x13, 0x12, 0x01, 0xb3, 0x12, 0x11, 0x13, 0x15, 0x76, 0x15, 0x40, 0x11, 0x70, 0x11, 0x70, 
	0x00, 0x11, 0x15, 0x66, 0x14, 0x12, 0x01, 0x25, 0x52, 0x07, 0x11, 0x08, 0x35, 0x07, 0x12, 0x42, 0x01, 0x34, 0x12, 0x15, 0x66, 0x15, 0x00, 0x13, 
	0x00, 0x10, 0x15, 0x56, 0x15, 0x12, 0x71, 0x12, 0x27, 0x38, 0x49, 0x3a, 0x3b, 0x3c, 0x0d, 0x39, 0xfc, 0xfb, 0xfc, 0x0d, 0x18, 0x3c, 0x3b, 0x4a, 0x69, 0xb8, 0x27, 0x12, 0x81, 0x13, 0x66, 0x14, 0x00, 0x12, 
	0xf0, 0x14, 0x56, 0x14, 0x51, 0x17, 0x19, 0x1c, 0x7d, 0x2c, 0x3b, 0x4a, 0x49, 0x88, 0xc7, 0x52, 0x01, 0x63, 0x32, 0x77, 0x48, 0x39, 0x2a, 0x2b, 0x1c, 0xbd, 0x1b, 0x19, 0x12, 0x51, 0x12, 0x66, 0x13, 0x00, 0x11, 
	0xe0, 0x13, 0x56, 0x14, 0x41, 0x18, 0x1c, 0x1d, 0x1a, 0x18, 0x17, 0x01, 0xaa, 0x12, 0x27, 0x18, 0x19, 0x1a, 0x1c, 0x2d, 0x1b, 0x12, 0x41, 0x12, 0x66, 0x12, 0x00, 0x10, 
	0xd0, 0x11, 0x56, 0x15, 0x31, 0x17, 0x2c, 0x18, 0x01, 0xb6, 0x17, 0x1b, 0x1d, 0x18, 0x41, 0x12, 0x56, 0x15, 0x00, 0x10, 
	0xd0, 0x15, 0x56, 0x31, 0x17, 0x1d, 0x1a, 0x01, 0xba, 0x19, 0x1d, 0x19, 0x41, 0x13, 0x56, 0x14, 0xf0, 
	0xc0, 0x13, 0x56, 0x12, 0x21, 0x17, 0x1d, 0x19, 0x01, 0xbc, 0x17, 0x1d, 0x19, 0x41, 0x14, 0x56, 0x12, 0xe0, 
	0x11, 0x70, 0x11, 0x20, 0x11, 0x56, 0x14, 0x31, 0x1c, 0x1a, 0x01, 0xbe, 0x18, 0x1d, 0x18, 0x41, 0x15, 0x46, 0x15, 0x60, 0x11, 0x70, 
	0xb0, 0x14, 0x56, 0x31, 0x1a, 0x1c, 0x01, 0xc0, 0x19, 0x1d, 0x17, 0x31, 0x12, 0x56, 0x13, 0xd0, 
	0xa0, 0x12, 0x56, 0x12, 0x21, 0x18, 0x1d, 0x17, 0x01, 0x6a, 0x12, 0x57, 0x01, 0x51, 0x1b, 0x1c, 0x41, 0x13, 0x56, 0x11, 0xc0, 
	0xa0, 0x15, 0x46, 0x14, 0x31, 0x1c, 0x1a, 0x01, 0x13, 0xbe, 0x18, 0x1a, 0x2e, 0x01, 0x16, 0x19, 0x2e, 0x1a, 0x41, 0x1b, 0x3e, 0x17, 0x31, 0x12, 0x2e, 0x1d, 0x51, 0x19, 0x3e, 0x1d, 0x51, 0x1a, 0xae, 0x1b, 0x21, 0x1a, 0x8e, 0x1b, 0x31, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x16, 0x13, 0x35, 0x56, 0x15, 0x51, 0x12, 0x14, 0x75, 0x14, 0x12, 0x01, 0x10, 0x1c, 0x19, 0x41, 0x15, 0x46, 0x15, 0xc0, 
	0x90, 0x13, 0x56, 0x31, 0x19, 0x1d, 0x01, 0x14, 0xbe, 0x18, 0x1a, 0x2e, 0x01, 0x16, 0x17, 0x2e, 0x1c, 0x41, 0x1d, 0x3e, 0x19, 0x31, 0x19, 0x2e, 0x1a, 0x51, 0x1c, 0x4e, 0x19, 0x41, 0x1a, 0xae, 0x1b, 0x11, 0x19, 0xae, 0x19, 0x21, 0x2e, 0x1c, 0x61, 0x1d, 0x2e, 0x17, 0x01, 0x14, 0x12, 0x15, 0xb6, 0x12, 0x21, 0x14, 0xa6, 0x15, 0x01, 0x10, 0x18, 0x1d, 0x17, 0x31, 0x12, 0x56, 0x13, 0xb0, 
	0x80, 0x11, 0x56, 0x13, 0x21, 0x12, 0x1d, 0x18, 0x01, 0x14, 0xbe, 0x18, 0x17, 0x28, 0x01, 0x17, 0x1c, 0x2e, 0x17, 0x21, 0x17, 0x4e, 0x1b, 0x31, 0x1b, 0x2e, 0x18, 0x41, 0x18, 0x5e, 0x1c, 0x41, 0x1a, 0xae, 0x1b, 0x11, 0x1c, 0x3e, 0x4c, 0x3e, 0x1b, 0x21, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x14, 0x14, 0xc6, 0x13, 0x11, 0x13, 0xc6, 0x01, 0x11, 0x1b, 0x1c, 0x41, 0x14, 0x46, 0x15, 0xb0, 
	0x80, 0x15, 0x46, 0x15, 0x31, 0x1b, 0x1c, 0x01, 0x19, 0x1c, 0x2e, 0x12, 0x41, 0x18, 0x29, 0x21, 0x29, 0x17, 0x18, 0x3a, 0x17, 0x21, 0x18, 0x29, 0x41, 0x29, 0x18, 0x11, 0x1a, 0x2e, 0x19, 0x21, 0x19, 0x4e, 0x1d, 0x31, 0x2e, 0x1d, 0x51, 0x1b, 0x2e, 0x19, 0x1d, 0x2e, 0x17, 0x71, 0x19, 0x2e, 0x1a, 0x51, 0x3e, 0x17, 0x41, 0x17, 0x2e, 0x1c, 0x21, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x14, 0x15, 0x36, 0x15, 0x43, 0x46, 0x13, 0x11, 0x15, 0x36, 0x23, 0x12, 0x23, 0x46, 0x01, 0x12, 0x1d, 0x18, 0x41, 0x56, 0x14, 0xa0, 
	0x70, 0x13, 0x56, 0x12, 0x21, 0x17, 0x1d, 0x17, 0x01, 0x19, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x1b, 0x5e, 0x18, 0x11, 0x19, 0x2e, 0x18, 0x21, 0x18, 0x2e, 0x19, 0x11, 0x17, 0x2e, 0x1b, 0x21, 0x1b, 0x2e, 0x1a, 0x2e, 0x17, 0x11, 0x18, 0x2e, 0x1a, 0x41, 0x17, 0x2e, 0x1d, 0x11, 0x19, 0x2e, 0x1b, 0x71, 0x19, 0x2e, 0x1a, 0x51, 0x2e, 0x1d, 0x61, 0x28, 0x17, 0x21, 0x3e, 0x6b, 0x1d, 0x2e, 0x17, 0x01, 0x14, 0x36, 0x25, 0x43, 0x34, 0x13, 0x12, 0x11, 0x15, 0x36, 0x11, 0x22, 0x13, 0x12, 0x15, 0x36, 0x01, 0x12, 0x18, 0x1d, 0x41, 0x12, 0x56, 0x12, 0x90, 
	0x11, 0x60, 0x15, 0x46, 0x14, 0x31, 0x1d, 0x1a, 0x01, 0x1a, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x21, 0x4e, 0x1d, 0x2e, 0x1d, 0x1b, 0x11, 0x17, 0x2e, 0x1a, 0x21, 0x1b, 0x2e, 0x31, 0x2d, 0x1e, 0x21, 0x2e, 0x1b, 0x18, 0x1d, 0x1e, 0x19, 0x11, 0x1b, 0x2e, 0x18, 0x41, 0x1a, 0x2e, 0x1a, 0x11, 0x12, 0x3e, 0x17, 0x61, 0x19, 0x2e, 0x1a, 0x51, 0x2e, 0x1d, 0xb1, 0x5e, 0x1d, 0x6e, 0x17, 0x01, 0x14, 0xb6, 0x15, 0x13, 0x71, 0x15, 0x56, 0x15, 0x13, 0x01, 0x13, 0x1b, 0x1a, 0x31, 0x12, 0x15, 0x46, 0x15, 0x10, 0x11, 0x70, 
	0x11, 0x50, 0x13, 0x56, 0x31, 0x18, 0x1c, 0x01, 0x1b, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x21, 0x2e, 0x1b, 0x31, 0x1c, 0x1d, 0x1c, 0x21, 0x1b, 0x1e, 0x1d, 0x21, 0x2e, 0x1b, 0x31, 0x1a, 0x1d, 0x1e, 0x28, 0x2e, 0x19, 0x12, 0x1d, 0x1e, 0x1b, 0x11, 0x1d, 0x1e, 0x1d, 0x41, 0x12, 0x3e, 0x17, 0x21, 0x1b, 0x2e, 0x1a, 0x61, 0x19, 0x2e, 0x1a, 0x51, 0x2e, 0x1d, 0xb1, 0x5e, 0x1d, 0x6e, 0x17, 0x01, 0x14, 0x14, 0xc6, 0x12, 0x51, 0x13, 0x15, 0x56, 0x15, 0x13, 0x01, 0x13, 0x17, 0x1d, 0x17, 0x41, 0x56, 0x12, 0x11, 0x70, 
	0x60, 0x56, 0x13, 0x31, 0x1d, 0x18, 0x01, 0x1b, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x19, 0x31, 0x1b, 0x1e, 0x1d, 0x21, 0x19, 0x2e, 0x17, 0x19, 0x2e, 0x18, 0x31, 0x18, 0x2e, 0x2a, 0x2e, 0x17, 0x11, 0x1d, 0x1e, 0x1d, 0x18, 0x2e, 0x1b, 0x41, 0x19, 0x3e, 0x3b, 0x1c, 0x2e, 0x1d, 0x61, 0x19, 0x2e, 0x1a, 0x51, 0x2e, 0x1d, 0x61, 0x3a, 0x21, 0x2e, 0x1d, 0x69, 0x1d, 0x2e, 0x17, 0x01, 0x13, 0x22, 0x14, 0x35, 0x86, 0x22, 0x33, 0x12, 0x13, 0x45, 0x36, 0x14, 0x01, 0x14, 0x19, 0x1c, 0x41, 0x13, 0x46, 0x15, 0x80, 
	0x50, 0x13, 0x56, 0x31, 0x1a, 0x1c, 0x01, 0x1c, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x19, 0x31, 0x1a, 0x1e, 0x1d, 0x31, 0x2e, 0x1a, 0x1b, 0x1e, 0x1d, 0x51, 0x1d, 0x1e, 0x1d, 0x1c, 0x2e, 0x21, 0x1a, 0x2e, 0x1b, 0x2e, 0x18, 0x41, 0x1d, 0xae, 0x18, 0x51, 0x19, 0x2e, 0x1a, 0x51, 0x3e, 0x18, 0x41, 0x17, 0x2e, 0x1d, 0x21, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x13, 0x12, 0x36, 0x15, 0x41, 0x12, 0x15, 0x26, 0x15, 0x12, 0x13, 0x36, 0x13, 0x41, 0x12, 0x36, 0x14, 0x01, 0x15, 0x1c, 0x19, 0x41, 0x15, 0x46, 0x13, 0x70, 
	0x50, 0x56, 0x13, 0x21, 0x12, 0x1d, 0x17, 0x01, 0x1c, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x19, 0x31, 0x1a, 0x1e, 0x1d, 0x31, 0x1b, 0x1e, 0x1d, 0x2e, 0x1a, 0x51, 0x1b, 0x4e, 0x1b, 0x21, 0x19, 0x5e, 0x41, 0x18, 0x3e, 0x5c, 0x1d, 0x2e, 0x1c, 0x51, 0x19, 0x2e, 0x1a, 0x51, 0x1d, 0x3e, 0x1d, 0x2c, 0x1d, 0x3e, 0x1d, 0x21, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x13, 0x13, 0xd6, 0x11, 0x13, 0x36, 0x15, 0x46, 0x15, 0x36, 0x13, 0x01, 0x15, 0x17, 0x1d, 0x41, 0x12, 0x46, 0x15, 0x70, 
	0x40, 0x13, 0x56, 0x31, 0x2b, 0x01, 0x1d, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x19, 0x31, 0x1a, 0x1e, 0x1d, 0x31, 0x18, 0x4e, 0x17, 0x51, 0x18, 0x4e, 0x19, 0x21, 0x17, 0x4e, 0x1b, 0x41, 0x1b, 0x2e, 0x19, 0x61, 0x1d, 0x2e, 0x17, 0x41, 0x19, 0x2e, 0x1a, 0x51, 0x1a, 0xae, 0x1b, 0x21, 0x2e, 0x1c, 0x61, 0x1d, 0x2e, 0x17, 0x01, 0x13, 0x12, 0xc6, 0x14, 0x11, 0x12, 0xb6, 0x15, 0x12, 0x01, 0x16, 0x2a, 0x41, 0x15, 0x46, 0x12, 0x60, 
	0x40, 0x15, 0x46, 0x13, 0x21, 0x17, 0x1d, 0x12, 0x01, 0x1d, 0x1c, 0x2e, 0x12, 0x41, 0x1a, 0x2e, 0x11, 0x12, 0x2e, 0x19, 0x31, 0x1a, 0x1e, 0x1d, 0x41, 0x1d, 0x2e, 0x1c, 0x71, 0x4e, 0x17, 0x31, 0x1d, 0x3e, 0x18, 0x31, 0x17, 0x3e, 0x12, 0x61, 0x1a, 0x2e, 0x1b, 0x41, 0x19, 0x2e, 0x1a, 0x61, 0x1a, 0x1d, 0x7e, 0x1b, 0x17, 0x21, 0x2e, 0x1c, 0x61, 0x1c, 0x2e, 0x17, 0x01, 0x14, 0x14, 0x15, 0x76, 0x15, 0x16, 0x13, 0x31, 0x14, 0x16, 0x15, 0x86, 0x12, 0x01, 0x17, 0x12, 0x1d, 0x17, 0x31, 0x12, 0x46, 0x14, 0x60, 
	0x30, 0x12, 0x56, 0x31, 0x1b, 0x1a, 0x01, 0x39, 0x1d, 0x1e, 0x19, 0x01, 0x37, 0x12, 0x37, 0x12, 0x01, 0x27, 0x92, 0x71, 0x82, 0x01, 0x1a, 0x1a, 0x1b, 0x41, 0x15, 0x46, 0x11, 0x50, 
	0x30, 0x13, 0x46, 0x14, 0x21, 0x17, 0x1d, 0x17, 0x01, 0x37, 0x18, 0x1b, 0x2e, 0x17, 0x01, 0x95, 0x12, 0x1d, 0x17, 0x31, 0x12, 0x46, 0x13, 0x50, 
	0x11, 0x20, 0x15, 0x46, 0x31, 0x1a, 0x1b, 0x01, 0x38, 0x1c, 0x2e, 0x1a, 0x01, 0x97, 0x2b, 0x41, 0x46, 0x15, 0x50, 
	0x20, 0x11, 0x56, 0x31, 0x1d, 0x18, 0x01, 0x38, 0x1b, 0x1c, 0x1b, 0x17, 0x01, 0x97, 0x17, 0x1d, 0x41, 0x13, 0x46, 0x50, 
	0x20, 0x13, 0x46, 0x14, 0x21, 0x17, 0x1d, 0x01, 0xd5, 0x1c, 0x18, 0x41, 0x46, 0x13, 0x40, 
	0x20, 0x14, 0x46, 0x12, 0x21, 0x1a, 0x1b, 0x01, 0xd5, 0x19, 0x1b, 0x41, 0x46, 0x14, 0x40, 
	0x20, 0x15, 0x46, 0x31, 0x1c, 0x18, 0x01, 0xd5, 0x17, 0x1d, 0x41, 0x14, 0x36, 0x15, 0x40, 
	0x20, 0x56, 0x31, 0x1d, 0x17, 0x01, 0xd6, 0x1d, 0x17, 0x31, 0x12, 0x46, 0x11, 0x30, 
	0x10, 0x12, 0x46, 0x14, 0x21, 0x17, 0x1d, 0x61, 0x12, 0x03, 0xca, 0x12, 0x51, 0x1c, 0x18, 0x31, 0x12, 0x46, 0x12, 0x30, 
	0x10, 0x12, 0x46, 0x13, 0x21, 0x18, 0x1d, 0x61, 0x13, 0x06, 0x41, 0x15, 0x06, 0x46, 0x15, 0x06, 0x41, 0x14, 0x51, 0x2a, 0x41, 0x46, 0x13, 0x30, 
	0x11, 0x13, 0x46, 0x12, 0x21, 0x18, 0x1b, 0x61, 0x15, 0x06, 0x41, 0x15, 0x06, 0x46, 0x15, 0x06, 0x41, 0x15, 0x51, 0x19, 0x1c, 0x41, 0x15, 0x36, 0x14, 0x30, 
	0x10, 0x14, 0x46, 0x12, 0x21, 0x2a, 0x51, 0x12, 0x15, 0x06, 0x41, 0x15, 0x06, 0x46, 0x15, 0x06, 0x41, 0x15, 0x13, 0x41, 0x18, 0x1d, 0x41, 0x15, 0x36, 0x15, 0x30, 
	0x10, 0x14, 0x46, 0x31, 0x1a, 0x19, 0x51, 0x13, 0x04, 0xcc, 0x13, 0x41, 0x17, 0x1d, 0x41, 0x14, 0x46, 0x30, 
	0x10, 0x14, 0x46, 0x31, 0x1b, 0x18, 0x01, 0xd7, 0x12, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x12, 0x20, 
	0x10, 0x15, 0x46, 0x31, 0x1c, 0x17, 0x01, 0xd8, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x12, 0x20, 
	0x10, 0x15, 0x46, 0x31, 0x1d, 0x17, 0x01, 0xd8, 0x1d, 0x18, 0x31, 0x12, 0x46, 0x13, 0x20, 
	0x10, 0x15, 0x46, 0x31, 0x1d, 0x17, 0x01, 0xd8, 0x1d, 0x18, 0x31, 0x12, 0x46, 0x14, 0x20, 
	0x10, 0x46, 0x15, 0x31, 0x1d, 0x12, 0x01, 0xd8, 0x1c, 0x19, 0x31, 0x12, 0x46, 0x14, 0x20, 
	0x11, 0x46, 0x15, 0x21, 0x12, 0x1d, 0x01, 0xd9, 0x1b, 0x1a, 0x31, 0x12, 0x46, 0x15, 0x20, 
	0x10, 0x46, 0x15, 0x21, 0x12, 0x1d, 0x01, 0xd9, 0x1a, 0x1b, 0x41, 0x46, 0x15, 0x20, 
	0x10, 0x46, 0x14, 0x21, 0x12, 0x1d, 0x01, 0x1b, 0x49, 0x18, 0x11, 0x17, 0x49, 0x12, 0x17, 0x19, 0x2a, 0x18, 0x11, 0x18, 0x49, 0x17, 0x59, 0x01, 0x71, 0x49, 0x18, 0x21, 0x18, 0x19, 0x1a, 0x19, 0x17, 0x21, 0x19, 0x2a, 0x19, 0x17, 0x12, 0x59, 0x01, 0x17, 0x19, 0x1c, 0x41, 0x56, 0x20, 
	0x10, 0x46, 0x14, 0x21, 0x17, 0x1d, 0x01, 0x14, 0x17, 0x3f, 0x17, 0x21, 0x1d, 0x4e, 0x18, 0x19, 0x4e, 0x17, 0x1b, 0x4e, 0x17, 0x1a, 0x4e, 0x18, 0x4e, 0x1c, 0x01, 0x71, 0x1d, 0x4e, 0x18, 0x17, 0x5e, 0x12, 0x19, 0x4e, 0x1c, 0x17, 0x4e, 0x1c, 0x21, 0x2f, 0x17, 0x01, 0x12, 0x19, 0x1d, 0x41, 0x56, 0x20, 
	0x11, 0x46, 0x14, 0x21, 0x17, 0x1d, 0x01, 0x10, 0x17, 0x7f, 0x17, 0x21, 0x1d, 0x19, 0x27, 0x1e, 0x18, 0x1a, 0x1c, 0x32, 0x11, 0x1d, 0x1a, 0x11, 0x12, 0x1a, 0x17, 0x1a, 0x1c, 0x32, 0x11, 0x17, 0x19, 0x1e, 0x27, 0x01, 0x71, 0x1d, 0x19, 0x21, 0x1e, 0x18, 0x19, 0x1e, 0x27, 0x18, 0x1e, 0x17, 0x1b, 0x1c, 0x27, 0x1b, 0x1e, 0x11, 0x17, 0x1a, 0x1e, 0x27, 0x21, 0x5f, 0x17, 0x12, 0xe1, 0x18, 0x1d, 0x41, 0x15, 0x46, 0x20, 
	0x11, 0x46, 0x14, 0x21, 0x17, 0x1d, 0xe1, 0xaf, 0x17, 0x21, 0x1e, 0x1a, 0x28, 0x1e, 0x18, 0x1a, 0x1e, 0x2d, 0x1c, 0x11, 0x1c, 0x3e, 0x1c, 0x12, 0x1a, 0x1e, 0x2d, 0x1c, 0x21, 0x19, 0x1e, 0x01, 0x73, 0x1d, 0x1e, 0x1d, 0x2e, 0x17, 0x19, 0x1d, 0x21, 0x12, 0x1e, 0x18, 0x2b, 0x21, 0x18, 0x1e, 0x21, 0x19, 0x1e, 0x41, 0x9f, 0x27, 0xa1, 0x18, 0x1d, 0x41, 0x15, 0x46, 0x11, 0x10, 
	0x12, 0x46, 0x13, 0x21, 0x18, 0x1c, 0x01, 0x11, 0x17, 0x6f, 0x12, 0x21, 0x4e, 0x1d, 0x11, 0x1a, 0x1d, 0x39, 0x11, 0x18, 0x3a, 0x1e, 0x18, 0x1a, 0x1d, 0x39, 0x21, 0x19, 0x1d, 0x01, 0x73, 0x1e, 0x1b, 0x29, 0x1e, 0x29, 0x1d, 0x21, 0x17, 0x1e, 0x17, 0x2b, 0x21, 0x18, 0x1e, 0x21, 0x19, 0x1d, 0x41, 0x8f, 0x18, 0x17, 0xb1, 0x17, 0x1d, 0x41, 0x14, 0x46, 0x12, 0x10, 
	0x12, 0x46, 0x13, 0x21, 0x18, 0x1c, 0x01, 0x15, 0x17, 0x2f, 0x17, 0x21, 0x1e, 0x1a, 0x29, 0x1e, 0x18, 0x1a, 0x1d, 0x39, 0x12, 0x1d, 0x1b, 0x29, 0x1e, 0x18, 0x1a, 0x1d, 0x39, 0x12, 0x11, 0x19, 0x1d, 0x01, 0x73, 0x1e, 0x1b, 0x19, 0x1a, 0x1e, 0x29, 0x1e, 0x2a, 0x1b, 0x1e, 0x17, 0x1b, 0x1d, 0x2a, 0x1c, 0x1d, 0x21, 0x19, 0x1d, 0x41, 0x5f, 0x17, 0xf1, 0x17, 0x1d, 0x41, 0x14, 0x46, 0x12, 0x10, 
	0x11, 0x46, 0x13, 0x21, 0x19, 0x1b, 0x01, 0x1b, 0x1e, 0x18, 0x11, 0x12, 0x1e, 0x18, 0x1a, 0x4e, 0x12, 0x1a, 0x3e, 0x1d, 0x12, 0x1a, 0x1d, 0x3e, 0x17, 0x11, 0x19, 0x1d, 0x01, 0x73, 0x4e, 0x1d, 0x12, 0x17, 0x1d, 0x3e, 0x1b, 0x11, 0x19, 0x4e, 0x1a, 0x21, 0x18, 0x1d, 0x41, 0x27, 0x12, 0x01, 0x12, 0x12, 0x1d, 0x12, 0x31, 0x13, 0x46, 0x12, 0x10, 
	0x12, 0x46, 0x13, 0x21, 0x18, 0x1b, 0x01, 0x29, 0x12, 0x01, 0x88, 0x12, 0x51, 0x12, 0x01, 0x21, 0x1d, 0x12, 0x31, 0x13, 0x46, 0x13, 0x10, 
	0x12, 0x46, 0x13, 0x21, 0x19, 0x1b, 0x01, 0xda, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x13, 0x10, 
	0x12, 0x46, 0x12, 0x21, 0x19, 0x1a, 0x01, 0xda, 0x1d, 0x17, 0x31, 0x12, 0x46, 0x13, 0x10, 
	0x13, 0x46, 0x12, 0x21, 0x2a, 0x01, 0xda, 0x1d, 0x17, 0x31, 0x12, 0x46, 0x13, 0x10, 
	0x13, 0x46, 0x12, 0x21, 0x2a, 0x01, 0x17, 0x17, 0x19, 0x1b, 0x1c, 0x0d, 0xa4, 0x2c, 0x1b, 0x19, 0x17, 0x01, 0x16, 0x1d, 0x18, 0x31, 0x12, 0x46, 0x13, 0x10, 
	0x13, 0x46, 0x12, 0x21, 0x1a, 0x19, 0x01, 0x15, 0x12, 0x1a, 0x1c, 0x1b, 0x19, 0x18, 0x07, 0xa5, 0x18, 0x19, 0x1b, 0x1c, 0x1a, 0x12, 0x01, 0x14, 0x1c, 0x18, 0x31, 0x12, 0x46, 0x14, 0x10, 
	0x13, 0x46, 0x12, 0x21, 0x1b, 0x19, 0x01, 0x14, 0x18, 0x1c, 0x1b, 0x17, 0x01, 0xab, 0x17, 0x1b, 0x1c, 0x17, 0x01, 0x13, 0x1b, 0x18, 0x31, 0x12, 0x46, 0x14, 0x10, 
	0x14, 0x46, 0x31, 0x1a, 0x19, 0x01, 0x13, 0x18, 0x1c, 0x19, 0x01, 0xaf, 0x19, 0x1d, 0x18, 0x01, 0x12, 0x1b, 0x19, 0x31, 0x12, 0x46, 0x14, 0x10, 
	0x13, 0x46, 0x31, 0x1b, 0x19, 0x01, 0x12, 0x17, 0x1c, 0x18, 0x41, 0x17, 0x19, 0x2a, 0x0b, 0xa1, 0x2a, 0x19, 0x17, 0x41, 0x19, 0x1c, 0x17, 0x01, 0x11, 0x1a, 0x19, 0x41, 0x46, 0x14, 0x10, 
	0x13, 0x46, 0x31, 0x1c, 0x19, 0x01, 0x12, 0x1b, 0x19, 0x31, 0x12, 0x1a, 0x0d, 0xa8, 0x1c, 0x1a, 0x41, 0x1a, 0x1b, 0x01, 0x11, 0x29, 0x41, 0x46, 0x14, 0x10, 
	0x14, 0x46, 0x31, 0x1c, 0x19, 0x01, 0x11, 0x19, 0x1b, 0x31, 0x17, 0x1b, 0x0d, 0xab, 0x1b, 0x12, 0x31, 0x1c, 0x19, 0x01, 0x10, 0x19, 0x1a, 0x41, 0x46, 0x14, 0x10, 
	0x14, 0x46, 0x31, 0x1c, 0x18, 0x01, 0x11, 0x1c, 0x18, 0x31, 0x1b, 0x0d, 0xad, 0x1b, 0x31, 0x19, 0x1c, 0x01, 0x10, 0x19, 0x1a, 0x41, 0x46, 0x15, 0x10, 
	0x14, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x17, 0x1c, 0x31, 0x19, 0x0d, 0xaf, 0x18, 0x21, 0x12, 0x1d, 0x17, 0xf1, 0x18, 0x1b, 0x41, 0x46, 0x15, 0x10, 
	0x14, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x19, 0x1a, 0x31, 0x1c, 0x0d, 0xaf, 0x1b, 0x31, 0x1b, 0x19, 0xf1, 0x18, 0x1b, 0x41, 0x46, 0x15, 0x10, 
	0x14, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x17, 0x0d, 0xb1, 0x12, 0x21, 0x2a, 0xf1, 0x17, 0x1c, 0x41, 0x46, 0x15, 0x10, 
	0x13, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x12, 0x21, 0x19, 0x1a, 0xf1, 0x17, 0x1d, 0x41, 0x46, 0x15, 0x10, 
	0x14, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0xf1, 0x17, 0x1d, 0x41, 0x56, 0x10, 
	0x14, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0xf1, 0x17, 0x1d, 0x41, 0x56, 0x10, 
	0x15, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0xf1, 0x17, 0x1d, 0x41, 0x15, 0x46, 0x10, 
	0x15, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0xf1, 0x12, 0x1d, 0x41, 0x15, 0x46, 0x10, 
	0x15, 0x46, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x41, 0x15, 0x46, 0x11, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x41, 0x14, 0x46, 0x11, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x12, 0x31, 0x14, 0x46, 0x11, 
	0x46, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x12, 0x31, 0x14, 0x46, 0x12, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x31, 0x14, 0x46, 0x12, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x12, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x12, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x12, 
	0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x31, 0x13, 0x46, 0x13, 
	0x46, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1c, 0x18, 0x31, 0x12, 0x46, 0x13, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1c, 0x18, 0x31, 0x12, 0x46, 0x13, 
	0x15, 0x36, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x18, 0x31, 0x12, 0x46, 0x13, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x18, 0x31, 0x12, 0x46, 0x13, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x19, 0x41, 0x46, 0x13, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x46, 0x13, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x46, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x46, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x2a, 0x41, 0x46, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x2a, 0x41, 0x46, 0x14, 
	0x15, 0x36, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1a, 0x41, 0x46, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1a, 0x41, 0x15, 0x36, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x15, 0x36, 0x14, 
	0x46, 0x14, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x14, 0x36, 0x14, 
	0x46, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x14, 0x36, 0x14, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x14, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x14, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x14, 0x45, 0x31, 0x1b, 0x18, 0x01, 0x10, 0x19, 0x18, 0x27, 0x19, 0x0d, 0xb1, 0x19, 0x27, 0x29, 0x01, 0x10, 0x18, 0x1b, 0x41, 0x13, 0x35, 0x14, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x46, 0x15, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x15, 0x36, 0x15, 0x31, 0x1c, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x36, 0x15, 
	0x54, 0x31, 0x1a, 0x18, 0x01, 0x10, 0x19, 0x38, 0x19, 0x0d, 0xb1, 0x19, 0x28, 0x29, 0x01, 0x10, 0x18, 0x1a, 0x41, 0x13, 0x44, 
	0x15, 0x46, 0x31, 0x1b, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x14, 0x46, 0x31, 0x1b, 0x18, 0x01, 0x10, 0x1a, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x14, 0x46, 0x31, 0x1b, 0x18, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x14, 0x46, 0x31, 0x1b, 0x19, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x13, 0x46, 0x31, 0x1b, 0x19, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x13, 0x46, 0x31, 0x1a, 0x19, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x13, 0x46, 0x31, 0x1a, 0x19, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x13, 0x46, 0x31, 0x2a, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x12, 0x46, 0x31, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x12, 0x46, 0x31, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x19, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x36, 0x15, 
	0x12, 0x46, 0x12, 0x21, 0x19, 0x1b, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x46, 
	0x11, 0x46, 0x12, 0x21, 0x19, 0x1b, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x46, 
	0x12, 0x46, 0x12, 0x21, 0x19, 0x1b, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1d, 0x41, 0x13, 0x46, 
	0x10, 0x46, 0x12, 0x21, 0x18, 0x1c, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x46, 0x13, 0x21, 0x18, 0x1c, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x18, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x46, 0x13, 0x21, 0x18, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x46, 0x13, 0x21, 0x18, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x46, 0x13, 0x21, 0x17, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x15, 0x36, 0x14, 0x21, 0x17, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1c, 0x41, 0x13, 0x46, 
	0x10, 0x15, 0x36, 0x14, 0x21, 0x17, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x13, 0x46, 
	0x11, 0x15, 0x36, 0x14, 0x21, 0x12, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x13, 0x46, 
	0x10, 0x15, 0x36, 0x15, 0x21, 0x17, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x13, 0x46, 
	0x10, 0x15, 0x36, 0x15, 0x21, 0x12, 0x1d, 0x01, 0x10, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x13, 0x46, 
	0x10, 0x14, 0x46, 0x31, 0x1d, 0x12, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1b, 0x41, 0x14, 0x46, 
	0x10, 0x14, 0x46, 0x31, 0x1d, 0x17, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x19, 0x1a, 0x41, 0x14, 0x46, 
	0x10, 0x14, 0x46, 0x31, 0x1d, 0x17, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x2a, 0x41, 0x14, 0x46, 
	0x10, 0x14, 0x46, 0x31, 0x1d, 0x17, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x2a, 0x41, 0x14, 0x36, 0x15, 
	0x10, 0x14, 0x46, 0x31, 0x1d, 0x17, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x2a, 0x41, 0x14, 0x36, 0x15, 
	0x11, 0x14, 0x46, 0x21, 0x12, 0x1d, 0x17, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x15, 0x36, 0x15, 
	0x10, 0x13, 0x46, 0x31, 0x1c, 0x18, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x15, 0x36, 0x15, 
	0x10, 0x13, 0x46, 0x31, 0x1b, 0x18, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1a, 0x19, 0x41, 0x15, 0x36, 0x15, 
	0x10, 0x13, 0x46, 0x31, 0x1b, 0x18, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x19, 0x41, 0x15, 0x36, 0x15, 
	0x10, 0x13, 0x46, 0x31, 0x1a, 0x19, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x18, 0x41, 0x46, 0x14, 
	0x10, 0x13, 0x46, 0x12, 0x21, 0x1a, 0x19, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x18, 0x41, 0x46, 0x14, 
	0x10, 0x13, 0x46, 0x12, 0x21, 0x19, 0x1a, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1b, 0x18, 0x41, 0x46, 0x14, 
	0x10, 0x12, 0x46, 0x12, 0x21, 0x19, 0x1a, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1c, 0x18, 0x41, 0x46, 0x14, 
	0x11, 0x12, 0x46, 0x12, 0x21, 0x18, 0x1b, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x19, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1c, 0x18, 0x41, 0x46, 0x14, 
	0x10, 0x12, 0x46, 0x12, 0x21, 0x18, 0x1c, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1c, 0x17, 0x41, 0x46, 0x13, 
	0x10, 0x12, 0x46, 0x13, 0x21, 0x17, 0x1d, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x18, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x41, 0x46, 0x13, 
	0x10, 0x11, 0x46, 0x13, 0x21, 0x17, 0x1d, 0xf1, 0x1b, 0x19, 0x21, 0x18, 0x0d, 0xb1, 0x17, 0x21, 0x19, 0x1a, 0x01, 0x10, 0x1d, 0x17, 0x41, 0x46, 0x13, 
	0x10, 0x11, 0x46, 0x13, 0x21, 0x17, 0x1d, 0xf1, 0x1a, 0x19, 0x21, 0x17, 0x0d, 0xb1, 0x12, 0x21, 0x2a, 0x01, 0x10, 0x1d, 0x17, 0x41, 0x46, 0x13, 
	0x20, 0x46, 0x13, 0x21, 0x12, 0x1d, 0xf1, 0x19, 0x1a, 0x31, 0x1c, 0x0d, 0xaf, 0x1b, 0x31, 0x1b, 0x19, 0x01, 0x10, 0x1d, 0x17, 0x41, 0x46, 0x13, 
	0x20, 0x46, 0x14, 0x31, 0x1d, 0xf1, 0x17, 0x1c, 0x31, 0x19, 0x0d, 0xaf, 0x18, 0x21, 0x12, 0x1d, 0x17, 0x01, 0x10, 0x1d, 0x12, 0x31, 0x12, 0x46, 0x12, 
	0x20, 0x46, 0x14, 0x31, 0x1d, 0x12, 0xf1, 0x1c, 0x18, 0x31, 0x1b, 0x0d, 0xad, 0x1b, 0x31, 0x19, 0x1b, 0x01, 0x11, 0x1d, 0x12, 0x31, 0x12, 0x46, 0x12, 
	0x11, 0x10, 0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0xf1, 0x19, 0x1b, 0x31, 0x12, 0x1b, 0x0d, 0xab, 0x1b, 0x12, 0x21, 0x12, 0x1c, 0x18, 0x01, 0x11, 0x1d, 0x41, 0x12, 0x46, 0x12, 
	0x20, 0x15, 0x36, 0x15, 0x31, 0x1d, 0x17, 0x01, 0x10, 0x1b, 0x19, 0x31, 0x12, 0x1a, 0x0d, 0xa8, 0x1c, 0x19, 0x41, 0x1a, 0x1b, 0x01, 0x12, 0x1d, 0x41, 0x12, 0x46, 0x12, 
	0x20, 0x15, 0x46, 0x31, 0x1d, 0x18, 0x01, 0x10, 0x17, 0x1c, 0x18, 0x41, 0x17, 0x19, 0x0a, 0xa5, 0x18, 0x12, 0x41, 0x19, 0x1c, 0x17, 0x01, 0x12, 0x1d, 0x41, 0x12, 0x46, 0x12, 
	0x20, 0x14, 0x46, 0x31, 0x1c, 0x18, 0x01, 0x11, 0x18, 0x1c, 0x19, 0x01, 0xaf, 0x19, 0x1c, 0x17, 0x01, 0x13, 0x1d, 0x41, 0x12, 0x46, 0x11, 
	0x20, 0x14, 0x46, 0x31, 0x1b, 0x19, 0x01, 0x12, 0x17, 0x1c, 0x1b, 0x17, 0x01, 0xab, 0x18, 0x1b, 0x1c, 0x17, 0x01, 0x14, 0x1d, 0x41, 0x13, 0x46, 0x11, 
	0x20, 0x14, 0x46, 0x31, 0x2a, 0x01, 0x13, 0x12, 0x1a, 0x1c, 0x1b, 0x19, 0x18, 0x07, 0xa5, 0x18, 0x19, 0x1b, 0x1c, 0x19, 0x01, 0x16, 0x1d, 0x41, 0x13, 0x46, 0x11, 
	0x20, 0x13, 0x46, 0x31, 0x19, 0x1b, 0x01, 0x15, 0x12, 0x19, 0x1a, 0x2c, 0x0d, 0xa3, 0x1c, 0x1b, 0x1a, 0x18, 0x12, 0x01, 0x16, 0x12, 0x1d, 0x41, 0x13, 0x46, 0x10, 
	0x20, 0x13, 0x46, 0x12, 0x21, 0x18, 0x1c, 0x01, 0xac, 0xc0, 0x01, 0x20, 0x17, 0x1d, 0x41, 0x13, 0x46, 0x10, 
	0x11, 0x10, 0x12, 0x46, 0x12, 0x21, 0x18, 0x1d, 0x01, 0xd8, 0x17, 0x1c, 0x41, 0x13, 0x46, 0x10, 
	0x20, 0x12, 0x46, 0x12, 0x21, 0x17, 0x1d, 0x01, 0xd8, 0x17, 0x1c, 0x41, 0x14, 0x46, 0x10, 
	0x20, 0x11, 0x46, 0x13, 0x21, 0x17, 0x1d, 0x01, 0x19, 0x12, 0x49, 0x12, 0x11, 0x29, 0x12, 0x11, 0x17, 0x18, 0x41, 0x18, 0x12, 0x17, 0x49, 0x21, 0x49, 0x17, 0x18, 0x39, 0x18, 0x01, 0x36, 0x28, 0x17, 0x31, 0x28, 0x17, 0x31, 0x28, 0x17, 0x31, 0x28, 0x21, 0x17, 0x18, 0x17, 0x11, 0x68, 0x11, 0x58, 0x17, 0x31, 0x28, 0x21, 0x17, 0x18, 0x17, 0x21, 0x18, 0x17, 0x31, 0x28, 0x17, 0x21, 0x17, 0x58, 0x17, 0x11, 0x17, 0x39, 0x18, 0x17, 0x11, 0x28, 0x31, 0x28, 0x01, 0x12, 0x17, 0x1b, 0x41, 0x14, 0x46, 0x10, 
	0x30, 0x46, 0x14, 0x21, 0x12, 0x1d, 0x12, 0x01, 0x13, 0x27, 0x31, 0x1b, 0x4e, 0x1b, 0x11, 0x2e, 0x1a, 0x11, 0x19, 0x1c, 0x31, 0x17, 0x1c, 0x11, 0x1c, 0x4e, 0x1a, 0x12, 0x4e, 0x19, 0x1b, 0x3e, 0x1c, 0x01, 0x36, 0x2b, 0x1a, 0x21, 0x17, 0x2b, 0x18, 0x31, 0x1a, 0x1b, 0x1a, 0x31, 0x19, 0x1a, 0x11, 0x17, 0x1b, 0x1a, 0x12, 0x11, 0x1a, 0x4b, 0x19, 0x11, 0x6b, 0x17, 0x21, 0x18, 0x1b, 0x21, 0x19, 0x1b, 0x19, 0x11, 0x17, 0x1b, 0x18, 0x21, 0x17, 0x2b, 0x19, 0x21, 0x18, 0x5b, 0x19, 0x17, 0x5b, 0x19, 0x11, 0x2a, 0x31, 0x2a, 0x01, 0x12, 0x18, 0x1b, 0x41, 0x15, 0x36, 0x15, 0x10, 
	0x30, 0x46, 0x14, 0x31, 0x1d, 0x17, 0xf1, 0x12, 0x17, 0x4f, 0x11, 0x10, 0x11, 0x1d, 0x1b, 0x27, 0x1b, 0x1c, 0x11, 0x1e, 0x1d, 0x1e, 0x17, 0x19, 0x1c, 0x31, 0x1b, 0x17, 0x11, 0x1e, 0x1a, 0x27, 0x1a, 0x1b, 0x12, 0x1e, 0x18, 0x22, 0x11, 0x2b, 0x32, 0x01, 0x36, 0x1b, 0x1a, 0x1b, 0x17, 0x11, 0x18, 0x2b, 0x18, 0x21, 0x17, 0x1b, 0x18, 0x1b, 0x17, 0x21, 0x19, 0x1a, 0x11, 0x2b, 0x17, 0x21, 0x2a, 0x47, 0x11, 0x1b, 0x19, 0x27, 0x18, 0x1b, 0x17, 0x21, 0x17, 0x1b, 0x17, 0x11, 0x2b, 0x1a, 0x11, 0x18, 0x1b, 0x12, 0x21, 0x19, 0x1b, 0x1a, 0x1b, 0x21, 0x17, 0x28, 0x1b, 0x19, 0x18, 0x17, 0x18, 0x1a, 0x18, 0x27, 0x2a, 0x11, 0x1a, 0x1b, 0x31, 0x2a, 0x01, 0x12, 0x18, 0x1a, 0x41, 0x15, 0x36, 0x15, 0x10, 
	0x30, 0x15, 0x36, 0x15, 0x31, 0x1d, 0x18, 0xc1, 0x17, 0x8f, 0x11, 0x10, 0x11, 0x1d, 0x19, 0x21, 0x1a, 0x1d, 0x11, 0x1e, 0x19, 0x1e, 0x1a, 0x19, 0x1c, 0x21, 0x18, 0x1b, 0x21, 0x1e, 0x18, 0x21, 0x1a, 0x1c, 0x12, 0x1e, 0x3d, 0x18, 0x1b, 0x1e, 0x2d, 0x1b, 0x01, 0x36, 0x1b, 0x19, 0x1b, 0x19, 0x11, 0x1b, 0x19, 0x1b, 0x18, 0x21, 0x19, 0x1b, 0x12, 0x1b, 0x19, 0x21, 0x19, 0x1b, 0x1a, 0x1b, 0x18, 0x31, 0x2a, 0x38, 0x17, 0x11, 0x1b, 0x18, 0x21, 0x17, 0x1b, 0x17, 0x31, 0x1b, 0x19, 0x17, 0x1b, 0x19, 0x1b, 0x11, 0x19, 0x1a, 0x31, 0x1a, 0x19, 0x17, 0x1b, 0x18, 0x31, 0x17, 0x1b, 0x18, 0x21, 0x18, 0x1b, 0x12, 0x21, 0x22, 0x11, 0x1a, 0x1b, 0x3a, 0x1b, 0x19, 0x01, 0x12, 0x29, 0x41, 0x46, 0x14, 0x10, 
	0x30, 0x14, 0x46, 0x31, 0x1b, 0x18, 0xb1, 0x17, 0x9f, 0x12, 0x10, 0x11, 0x1e, 0x19, 0x21, 0x1a, 0x1c, 0x11, 0x1e, 0x17, 0x1b, 0x1e, 0x1a, 0x1c, 0x21, 0x1c, 0x17, 0x21, 0x1e, 0x18, 0x21, 0x1a, 0x1b, 0x17, 0x1e, 0x1a, 0x29, 0x17, 0x1b, 0x1c, 0x29, 0x18, 0x01, 0x36, 0x1b, 0x18, 0x19, 0x1a, 0x18, 0x1b, 0x17, 0x1b, 0x18, 0x21, 0x1b, 0x19, 0x11, 0x19, 0x1b, 0x21, 0x19, 0x3b, 0x17, 0x31, 0x1a, 0x4b, 0x18, 0x11, 0x1b, 0x5a, 0x41, 0x19, 0x1a, 0x18, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x19, 0x21, 0x17, 0x1b, 0x18, 0x11, 0x1b, 0x19, 0x31, 0x17, 0x1b, 0x18, 0x21, 0x18, 0x1b, 0x61, 0x1a, 0x5b, 0x19, 0x01, 0x12, 0x1a, 0x18, 0x41, 0x46, 0x14, 0x10, 
	0x30, 0x14, 0x46, 0x31, 0x2a, 0xf1, 0x17, 0x5f, 0x31, 0x1d, 0x1c, 0x2a, 0x1d, 0x1b, 0x11, 0x1e, 0x27, 0x2e, 0x1c, 0x11, 0x19, 0x1a, 0x31, 0x1e, 0x1c, 0x2a, 0x1d, 0x1b, 0x17, 0x1e, 0x17, 0x31, 0x1c, 0x1a, 0x01, 0x39, 0x1b, 0x28, 0x2b, 0x1a, 0x11, 0x1b, 0x18, 0x11, 0x18, 0x5b, 0x17, 0x11, 0x19, 0x1a, 0x17, 0x1b, 0x1a, 0x12, 0x21, 0x1a, 0x19, 0x51, 0x5b, 0x1a, 0x41, 0x18, 0x1b, 0x19, 0x1a, 0x11, 0x1b, 0x19, 0x1b, 0x17, 0x21, 0x19, 0x5b, 0x31, 0x17, 0x1b, 0x18, 0x21, 0x18, 0x1b, 0x17, 0x21, 0x19, 0x1a, 0x11, 0x2a, 0x37, 0x1a, 0x19, 0x01, 0x12, 0x1b, 0x18, 0x41, 0x46, 0x13, 0x10, 
	0x11, 0x20, 0x13, 0x46, 0x12, 0x21, 0x18, 0x1b, 0x01, 0x13, 0x12, 0x1f, 0x31, 0x1a, 0x2e, 0x1d, 0x1e, 0x18, 0x11, 0x1e, 0x17, 0x11, 0x1a, 0x1d, 0x1c, 0x11, 0x1c, 0x12, 0x31, 0x1b, 0x4e, 0x18, 0x17, 0x1e, 0x12, 0x31, 0x1c, 0x1a, 0x01, 0x39, 0x1b, 0x19, 0x11, 0x2b, 0x18, 0x11, 0x1b, 0x18, 0x11, 0x1a, 0x1b, 0x39, 0x1b, 0x19, 0x11, 0x19, 0x1a, 0x11, 0x18, 0x1b, 0x1a, 0x21, 0x2a, 0x39, 0x18, 0x11, 0x1a, 0x18, 0x22, 0x18, 0x1b, 0x17, 0x31, 0x17, 0x2b, 0x19, 0x11, 0x2a, 0x1b, 0x21, 0x12, 0x1b, 0x1a, 0x19, 0x18, 0x19, 0x1b, 0x18, 0x21, 0x17, 0x1b, 0x19, 0x21, 0x18, 0x1b, 0x5a, 0x11, 0x2a, 0x31, 0x1b, 0x19, 0x01, 0x12, 0x1d, 0x17, 0x41, 0x46, 0x13, 0x10, 
	0x30, 0x12, 0x46, 0x12, 0x21, 0x17, 0x1d, 0x01, 0x1a, 0x12, 0xa1, 0x1a, 0x19, 0x61, 0x12, 0x01, 0x44, 0x1b, 0x18, 0x11, 0x19, 0x1b, 0x21, 0x1b, 0x18, 0x17, 0x1b, 0x18, 0x31, 0x19, 0x1b, 0x11, 0x19, 0x1a, 0x21, 0x19, 0x1b, 0x19, 0x11, 0x1a, 0x4b, 0x19, 0x11, 0x1b, 0x18, 0x21, 0x18, 0x1b, 0x17, 0x41, 0x2b, 0x18, 0x11, 0x19, 0x1b, 0x19, 0x21, 0x18, 0x1b, 0x17, 0x31, 0x1b, 0x1a, 0x21, 0x17, 0x1b, 0x18, 0x31, 0x1a, 0x4b, 0x18, 0x11, 0x2a, 0x31, 0x1a, 0x19, 0x01, 0x12, 0x1d, 0x12, 0x31, 0x12, 0x46, 0x12, 0x10, 
	0x30, 0x11, 0x46, 0x13, 0x31, 0x1d, 0x01, 0x24, 0x17, 0x1c, 0x01, 0xb0, 0x12, 0x1d, 0x41, 0x12, 0x46, 0x11, 0x10, 
	0x40, 0x46, 0x14, 0x31, 0x1c, 0x17, 0x01, 0xd5, 0x17, 0x1b, 0x41, 0x13, 0x46, 0x20, 
	0x40, 0x15, 0x46, 0x31, 0x29, 0x01, 0x4d, 0x13, 0x05, 0x3a, 0x13, 0x01, 0x4c, 0x29, 0x41, 0x15, 0x36, 0x15, 0x20, 
	0x40, 0x14, 0x46, 0x31, 0x17, 0x1c, 0x81, 0x00, 0x34, 0xf1, 0x12, 0x15, 0x06, 0x3c, 0x15, 0x12, 0x01, 0x4a, 0x1c, 0x17, 0x41, 0x46, 0x14, 0x20, 
	0x40, 0x13, 0x46, 0x12, 0x31, 0x1d, 0x17, 0x41, 0x25, 0x06, 0x41, 0x12, 0x21, 0x15, 0x26, 0x15, 0x14, 0x03, 0x36, 0x14, 0x36, 0x15, 0x21, 0x14, 0x06, 0x41, 0x15, 0x13, 0x31, 0x12, 0x1d, 0x41, 0x12, 0x46, 0x13, 0x20, 
	0x40, 0x11, 0x46, 0x14, 0x31, 0x29, 0x41, 0x13, 0x15, 0x06, 0x41, 0x12, 0x11, 0x13, 0x26, 0x15, 0x12, 0x01, 0x38, 0x12, 0x15, 0x26, 0x12, 0x11, 0x14, 0x06, 0x41, 0x15, 0x41, 0x18, 0x1b, 0x41, 0x13, 0x46, 0x12, 0x20, 
	0x11, 0x40, 0x15, 0x46, 0x31, 0x17, 0x1d, 0x51, 0x15, 0x06, 0x41, 0x12, 0x11, 0x13, 0x26, 0x12, 0xd1, 0x17, 0x3f, 0x17, 0x51, 0x5f, 0x18, 0x3f, 0x12, 0x21, 0x17, 0x18, 0x5f, 0x01, 0x10, 0x12, 0x26, 0x13, 0x11, 0x14, 0x06, 0x41, 0x14, 0x41, 0x1c, 0x18, 0x41, 0x15, 0x46, 0x30, 
	0x50, 0x13, 0x46, 0x13, 0x31, 0x1b, 0x19, 0x41, 0x14, 0x05, 0x41, 0x12, 0x11, 0x14, 0x16, 0x15, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x0f, 0x14, 0x17, 0xf1, 0x15, 0x16, 0x13, 0x11, 0x13, 0x05, 0x41, 0x13, 0x31, 0x17, 0x1d, 0x41, 0x12, 0x46, 0x14, 0x30, 
	0x50, 0x12, 0x46, 0x15, 0x31, 0x17, 0x1d, 0x01, 0x48, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x0f, 0x15, 0x17, 0xe1, 0x15, 0x16, 0x13, 0x01, 0x47, 0x1b, 0x1a, 0x41, 0x14, 0x46, 0x13, 0x30, 
	0x60, 0x15, 0x46, 0x12, 0x31, 0x1c, 0x1a, 0x01, 0x47, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x5f, 0x31, 0x6f, 0x17, 0x21, 0x17, 0x4f, 0xe1, 0x15, 0x16, 0x13, 0x01, 0x46, 0x17, 0x1d, 0x12, 0x41, 0x56, 0x40, 
	0x60, 0x13, 0x46, 0x15, 0x31, 0x18, 0x1d, 0x17, 0x01, 0x46, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x2f, 0x18, 0x17, 0x51, 0x1f, 0x18, 0x2f, 0x51, 0x4f, 0x18, 0x41, 0x17, 0x3f, 0x17, 0xd1, 0x15, 0x16, 0x13, 0x01, 0x46, 0x2b, 0x41, 0x13, 0x46, 0x14, 0x40, 
	0x70, 0x15, 0x46, 0x13, 0x31, 0x2b, 0x01, 0x13, 0x17, 0x48, 0x17, 0x31, 0x67, 0x31, 0x77, 0x11, 0x37, 0x12, 0x31, 0x27, 0x01, 0x10, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x4f, 0x51, 0x4f, 0x61, 0x3f, 0x17, 0xd1, 0x15, 0x16, 0x13, 0x71, 0x17, 0x48, 0x12, 0x31, 0x12, 0x17, 0x38, 0x17, 0x31, 0x27, 0x41, 0x27, 0x21, 0x67, 0x12, 0x41, 0x17, 0x38, 0x17, 0x31, 0x77, 0x81, 0x17, 0x1d, 0x17, 0x41, 0x56, 0x12, 0x40, 
	0x70, 0x13, 0x56, 0x31, 0x17, 0x1d, 0x18, 0x01, 0x11, 0x19, 0x6e, 0x1b, 0x21, 0x6e, 0x1c, 0x21, 0x6e, 0x1b, 0x11, 0x1b, 0x2e, 0x1b, 0x21, 0x17, 0x1e, 0x1a, 0x01, 0x10, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x4f, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xd1, 0x15, 0x16, 0x13, 0x61, 0x1a, 0x5e, 0x1d, 0x12, 0x11, 0x18, 0x6e, 0x1c, 0x21, 0x1b, 0x1e, 0x17, 0x31, 0x1c, 0x1e, 0x21, 0x7e, 0x18, 0x11, 0x17, 0x1d, 0x5e, 0x1b, 0x11, 0x17, 0x6e, 0x1a, 0x81, 0x1c, 0x1a, 0x41, 0x13, 0x46, 0x15, 0x50, 
	0x80, 0x15, 0x46, 0x13, 0x31, 0x1a, 0x1c, 0x01, 0x11, 0x1d, 0x1e, 0x1b, 0x3a, 0x2e, 0x12, 0x11, 0x2e, 0x3a, 0x2e, 0x18, 0x11, 0x1e, 0x1d, 0x49, 0x18, 0x11, 0x1b, 0x3e, 0x18, 0x11, 0x17, 0x1e, 0x1a, 0x01, 0x10, 0x14, 0x16, 0x14, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x4f, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xd1, 0x15, 0x16, 0x13, 0x61, 0x2e, 0x39, 0x1c, 0x1e, 0x18, 0x11, 0x1b, 0x1e, 0x1c, 0x3a, 0x1d, 0x1e, 0x18, 0x11, 0x1b, 0x1e, 0x17, 0x31, 0x1c, 0x1e, 0x21, 0x2e, 0x3a, 0x1c, 0x1e, 0x1a, 0x11, 0x19, 0x1e, 0x1c, 0x3a, 0x1e, 0x1d, 0x11, 0x17, 0x1e, 0x1d, 0x49, 0x18, 0x71, 0x18, 0x1d, 0x51, 0x56, 0x13, 0x50, 
	0x11, 0x70, 0x11, 0x56, 0x41, 0x1d, 0x1a, 0x01, 0x10, 0x1e, 0x1d, 0x41, 0x1b, 0x1e, 0x17, 0x11, 0x1e, 0x1d, 0x31, 0x1b, 0x1e, 0x18, 0x11, 0x1e, 0x1c, 0x48, 0x17, 0x11, 0x1b, 0x1d, 0x19, 0x1e, 0x1d, 0x12, 0x18, 0x1e, 0x1a, 0x01, 0x10, 0x13, 0x16, 0x15, 0xe1, 0x17, 0x3f, 0x17, 0x51, 0x4f, 0x51, 0x12, 0x3f, 0x61, 0x2f, 0x18, 0x17, 0xd1, 0x15, 0x16, 0x13, 0x61, 0x1d, 0x1e, 0x49, 0x18, 0x21, 0x1c, 0x1e, 0x17, 0x31, 0x19, 0x1d, 0x19, 0x11, 0x1b, 0x1e, 0x17, 0x31, 0x1d, 0x1e, 0x21, 0x1e, 0x1d, 0x31, 0x18, 0x1e, 0x1a, 0x11, 0x1a, 0x1e, 0x19, 0x31, 0x18, 0x19, 0x11, 0x17, 0x1d, 0x1c, 0x48, 0x12, 0x71, 0x1d, 0x19, 0x41, 0x14, 0x46, 0x15, 0x60, 
	0x90, 0x14, 0x46, 0x15, 0x31, 0x18, 0x1d, 0x17, 0xf1, 0x1e, 0x1d, 0x41, 0x1b, 0x1e, 0x17, 0x11, 0x2e, 0x3a, 0x1d, 0x1e, 0x17, 0x12, 0x6e, 0x18, 0x11, 0x1b, 0x1e, 0x11, 0x1c, 0x1e, 0x1b, 0x18, 0x1e, 0x1a, 0x01, 0x10, 0x13, 0x16, 0x15, 0xf1, 0x3f, 0x17, 0x51, 0x4f, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xd1, 0x26, 0x13, 0x61, 0x1b, 0x6e, 0x18, 0x11, 0x1c, 0x1e, 0x17, 0x31, 0x19, 0x1e, 0x19, 0x11, 0x1b, 0x1e, 0x17, 0x31, 0x1d, 0x1e, 0x21, 0x2e, 0x3a, 0x1c, 0x1e, 0x18, 0x11, 0x1b, 0x1e, 0x18, 0x61, 0x17, 0x6e, 0x18, 0x61, 0x1a, 0x1c, 0x51, 0x56, 0x13, 0x60, 
	0x90, 0x11, 0x56, 0x13, 0x31, 0x2b, 0xf1, 0x1e, 0x1d, 0x41, 0x1c, 0x1e, 0x17, 0x11, 0x6e, 0x1c, 0x11, 0x12, 0x1e, 0x1c, 0x47, 0x21, 0x1b, 0x1e, 0x11, 0x17, 0x2e, 0x1a, 0x1e, 0x1a, 0x01, 0x10, 0x12, 0x26, 0x12, 0xe1, 0x4f, 0x51, 0x4f, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xc1, 0x12, 0x26, 0x12, 0x61, 0x18, 0x19, 0x37, 0x1b, 0x1e, 0x19, 0x11, 0x1c, 0x1e, 0x17, 0x31, 0x1a, 0x1e, 0x19, 0x11, 0x1b, 0x1e, 0x18, 0x31, 0x1d, 0x1e, 0x21, 0x6e, 0x1c, 0x17, 0x11, 0x1a, 0x1e, 0x18, 0x31, 0x2b, 0x11, 0x17, 0x1e, 0x1c, 0x47, 0x61, 0x17, 0x1d, 0x17, 0x41, 0x15, 0x46, 0x15, 0x70, 
	0xa0, 0x13, 0x56, 0x41, 0x1d, 0x18, 0xe1, 0x1d, 0x1e, 0x1c, 0x2b, 0x1c, 0x2e, 0x21, 0x1e, 0x1d, 0x38, 0x17, 0x21, 0x12, 0x1e, 0x1d, 0x4b, 0x19, 0x11, 0x1b, 0x1e, 0x21, 0x19, 0x3e, 0x19, 0x01, 0x11, 0x26, 0x13, 0xe1, 0x4f, 0x17, 0x31, 0x5f, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xc1, 0x14, 0x16, 0x15, 0x71, 0x2e, 0x3a, 0x1c, 0x1e, 0x19, 0x11, 0x1b, 0x1e, 0x1d, 0x2b, 0x1c, 0x2e, 0x17, 0x11, 0x1a, 0x1e, 0x1d, 0x2b, 0x1c, 0x1e, 0x1d, 0x21, 0x1e, 0x1d, 0x37, 0x1a, 0x1e, 0x19, 0x11, 0x1a, 0x1e, 0x1d, 0x2b, 0x1c, 0x2e, 0x11, 0x17, 0x1e, 0x1d, 0x4b, 0x18, 0x51, 0x1c, 0x1a, 0x41, 0x12, 0x56, 0x13, 0x70, 
	0xb0, 0x15, 0x46, 0x14, 0x31, 0x18, 0x1d, 0x12, 0xd1, 0x19, 0x5e, 0x1d, 0x19, 0x21, 0x1e, 0x1d, 0x61, 0x17, 0x6e, 0x1a, 0x11, 0x1c, 0x1e, 0x31, 0x1c, 0x2e, 0x19, 0x01, 0x11, 0x14, 0x16, 0x15, 0xe1, 0x17, 0x1f, 0x18, 0x7f, 0x18, 0x2f, 0x51, 0x12, 0x3f, 0x61, 0x3f, 0x17, 0xb1, 0x12, 0x26, 0x13, 0x71, 0x1a, 0x5e, 0x1c, 0x17, 0x11, 0x17, 0x1d, 0x5e, 0x1b, 0x21, 0x17, 0x1d, 0x4e, 0x1d, 0x18, 0x21, 0x1e, 0x1c, 0x31, 0x19, 0x1e, 0x19, 0x11, 0x17, 0x1c, 0x5e, 0x1a, 0x11, 0x17, 0x6e, 0x1a, 0x41, 0x19, 0x1d, 0x51, 0x15, 0x46, 0x15, 0x80, 
	0xb0, 0x12, 0x56, 0x12, 0x31, 0x1a, 0x1b, 0x01, 0x10, 0x22, 0x01, 0x30, 0x12, 0x26, 0x14, 0xe1, 0xcf, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xb1, 0x15, 0x16, 0x15, 0xa1, 0x22, 0x81, 0x22, 0x71, 0x12, 0x27, 0x12, 0x01, 0x10, 0x22, 0xf1, 0x12, 0x1d, 0x18, 0x41, 0x13, 0x56, 0x12, 0x80, 
	0xc0, 0x14, 0x46, 0x15, 0x41, 0x1c, 0x18, 0x01, 0x42, 0x13, 0x26, 0x14, 0xe1, 0x17, 0xaf, 0x51, 0x17, 0x3f, 0x61, 0x3f, 0x17, 0xa1, 0x14, 0x26, 0x13, 0x01, 0x42, 0x2b, 0x51, 0x56, 0x14, 0x90, 
	0xc0, 0x11, 0x56, 0x13, 0x31, 0x17, 0x1d, 0x17, 0x01, 0x42, 0x14, 0x26, 0x14, 0x12, 0xf1, 0x37, 0x11, 0x47, 0x61, 0x37, 0x61, 0x37, 0x91, 0x12, 0x15, 0x26, 0x14, 0x01, 0x42, 0x18, 0x1d, 0x12, 0x41, 0x14, 0x56, 0xa0, 
	0x11, 0x70, 0x11, 0x40, 0x13, 0x56, 0x12, 0x31, 0x1a, 0x1d, 0x12, 0x01, 0x42, 0x14, 0x36, 0x13, 0x12, 0x01, 0x2f, 0x14, 0x36, 0x14, 0x01, 0x42, 0x12, 0x1c, 0x18, 0x41, 0x12, 0x56, 0x13, 0x20, 0x11, 0x70, 
	0xe0, 0x15, 0x46, 0x15, 0x41, 0x1b, 0x1c, 0x01, 0x43, 0x13, 0x56, 0x05, 0x2c, 0x46, 0x15, 0x13, 0x01, 0x43, 0x1b, 0x1a, 0x51, 0x15, 0x46, 0x15, 0xb0, 
	0xe0, 0x11, 0x56, 0x14, 0x41, 0x2c, 0x12, 0x01, 0x43, 0x13, 0x15, 0x06, 0x30, 0x15, 0x13, 0x01, 0x44, 0x1a, 0x1b, 0x51, 0x13, 0x56, 0x11, 0xb0, 
	0xf0, 0x13, 0x56, 0x13, 0x41, 0x1b, 0x1d, 0x18, 0x01, 0x44, 0x12, 0x03, 0x2d, 0x22, 0x01, 0x45, 0x2b, 0x51, 0x12, 0x56, 0x13, 0xc0, 
	0x00, 0x10, 0x15, 0x56, 0x12, 0x41, 0x19, 0x1d, 0x1c, 0x18, 0x17, 0x01, 0xb4, 0x18, 0x1c, 0x1a, 0x61, 0x15, 0x46, 0x15, 0xd0, 
	0x00, 0x10, 0x11, 0x66, 0x12, 0x51, 0x19, 0x1c, 0x4d, 0x1b, 0x1a, 0x29, 0x28, 0x47, 0x12, 0x01, 0xa1, 0x12, 0x17, 0x18, 0x1a, 0x1d, 0x1c, 0x18, 0x61, 0x14, 0x56, 0x11, 0xd0, 
	0x00, 0x11, 0x12, 0x66, 0x12, 0x71, 0x27, 0x18, 0x29, 0x1a, 0x2b, 0x1c, 0xdd, 0x3c, 0x3b, 0x4a, 0x69, 0xa8, 0x07, 0x4f, 0x08, 0x13, 0xc9, 0x5a, 0x4b, 0x2c, 0x9d, 0x1b, 0x17, 0x71, 0x14, 0x56, 0x13, 0xe0, 
	0x00, 0x12, 0x13, 0x66, 0x13, 0x01, 0x1e, 0x32, 0xa7, 0x98, 0x69, 0x7a, 0x6b, 0x5c, 0x0d, 0x45, 0x5c, 0x7b, 0x6a, 0x09, 0x10, 0x28, 0x17, 0x12, 0x91, 0x15, 0x56, 0x14, 0xf0, 
	0x11, 0x70, 0x11, 0x70, 0x11, 0x20, 0x14, 0x66, 0x15, 0x12, 0x01, 0x4c, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x71, 0x12, 0x01, 0x30, 0x66, 0x15, 0x11, 0x70, 0x11, 0x70, 
	0x00, 0x14, 0x14, 0x76, 0x15, 0x13, 0x12, 0x01, 0xb7, 0x12, 0x15, 0x76, 0x11, 0x00, 0x10, 
	0x00, 0x15, 0x14, 0xc6, 0x15, 0x14, 0x23, 0x42, 0x01, 0xa8, 0x22, 0x14, 0x96, 0x12, 0x00, 0x11, 
	0x00, 0x16, 0x13, 0x06, 0x1b, 0x35, 0x64, 0x03, 0x10, 0xc2, 0x01, 0x59, 0x02, 0x16, 0x63, 0x24, 0x15, 0xd6, 0x15, 0x12, 0x00, 0x12, 
	0x00, 0x17, 0x12, 0x15, 0x06, 0x58, 0x05, 0x1e, 0x06, 0x4c, 0x14, 0x00, 0x14, 
	0x00, 0x19, 0x13, 0x15, 0x06, 0xbe, 0x14, 0x12, 0x00, 0x15, 
	0x00, 0x1b, 0x12, 0x13, 0x15, 0x06, 0xb8, 0x15, 0x13, 0x11, 0x00, 0x17, 
	0x00, 0x1f, 0x12, 0x23, 0x24, 0x35, 0x06, 0xab, 0x15, 0x14, 0x13, 0x00, 0x1b, 
	0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x12, 0x11, 0x42, 0x23, 0x54, 0x35, 0x16, 0x25, 0x06, 0x55, 0x15, 0x86, 0x75, 0x16, 0x65, 0x14, 0x13, 0x84, 0x53, 0x22, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 
	
}; // 240x280 Bitmap (67200 pixels) in 8922 bytes

const uint16_t digital_wide_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0x0000, 0x1082, 0x08e5, 0x098a, 0x0a0d, 0x02b2, 0x0335, 0x3166, 0x52aa, 0x6b8e, 0x9492, 0xad74, 0xceba, 0xd6fb, 0xffff, 0xe041, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_digital_wide_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(digital_wide_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(digital_wide_RLEBM_palette);
	bmInfo.width = 240;
	bmInfo.height = 280;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'db.bmp'.
//

const byte db_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x04, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x01, 0x00, 0x01, 0x05, 0x01, 0x06, 0x04, 0x07, 0x01, 0x08, 0x01, 0x09, 0x01, 0x00, 0x03, 
	0x00, 0x04, 0x0a, 0x01, 0x0b, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x01, 0x0e, 0x01, 0x0c, 0x03, 0x0b, 0x01, 0x0c, 0x03, 0x0f, 0x01, 0x10, 0x01, 0x00, 0x01, 
	0x00, 0x05, 0x11, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x12, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x14, 0x01, 0x12, 0x01, 0x0c, 0x02, 0x15, 0x01, 0x00, 0x01, 
	0x00, 0x05, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x01, 0x18, 0x01, 0x0c, 0x02, 0x19, 0x01, 0x1a, 0x01, 
	0x00, 0x05, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x1b, 0x01, 0x0c, 0x02, 0x1c, 0x01, 
	0x00, 0x05, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x16, 0x01, 0x0c, 0x02, 0x1d, 0x01, 
	0x00, 0x05, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x1e, 0x01, 0x0c, 0x02, 0x09, 0x01, 
	0x00, 0x05, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x01, 0x10, 0x01, 0x1f, 0x01, 0x0c, 0x01, 0x1b, 0x01, 0x10, 0x01, 
	0x00, 0x01, 0x20, 0x01, 0x03, 0x01, 0x1e, 0x01, 0x21, 0x01, 0x1e, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x01, 0x22, 0x01, 0x0c, 0x02, 0x05, 0x01, 0x00, 0x01, 
	0x10, 0x01, 0x23, 0x01, 0x0c, 0x02, 0x24, 0x01, 0x0c, 0x02, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x03, 0x01, 0x25, 0x01, 0x0b, 0x01, 0x19, 0x01, 0x26, 0x01, 0x00, 0x02, 
	0x27, 0x01, 0x0c, 0x02, 0x28, 0x01, 0x10, 0x01, 0x29, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x04, 0x19, 0x01, 0x05, 0x01, 0x00, 0x03, 
	0x2a, 0x01, 0x0c, 0x02, 0x20, 0x01, 0x00, 0x01, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x2a, 0x01, 0x2b, 0x01, 0x2c, 0x01, 0x0c, 0x01, 0x12, 0x01, 0x2d, 0x01, 0x00, 0x01, 
	0x12, 0x01, 0x0c, 0x02, 0x10, 0x01, 0x00, 0x01, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x01, 0x2e, 0x01, 0x19, 0x01, 0x0c, 0x01, 0x1e, 0x01, 0x10, 0x01, 
	0x23, 0x01, 0x0c, 0x01, 0x0b, 0x01, 0x00, 0x02, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x07, 0x01, 0x0c, 0x02, 0x05, 0x01, 
	0x2f, 0x01, 0x0c, 0x01, 0x19, 0x01, 0x00, 0x02, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x15, 0x01, 0x0c, 0x02, 0x04, 0x01, 
	0x0d, 0x01, 0x0c, 0x01, 0x19, 0x01, 0x00, 0x02, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x30, 0x01, 0x0c, 0x02, 0x06, 0x01, 
	0x1b, 0x01, 0x0c, 0x01, 0x0b, 0x01, 0x00, 0x02, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x08, 0x01, 0x0c, 0x02, 0x02, 0x01, 
	0x11, 0x01, 0x0c, 0x02, 0x31, 0x01, 0x00, 0x01, 0x16, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x17, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x02, 0x12, 0x01, 0x0c, 0x02, 0x28, 0x01, 
	0x0f, 0x01, 0x0c, 0x02, 0x09, 0x01, 0x00, 0x01, 0x32, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x00, 0x02, 0x33, 0x01, 0x0c, 0x02, 0x13, 0x01, 0x00, 0x01, 0x34, 0x01, 0x0c, 0x02, 0x1b, 0x01, 0x35, 0x01, 
	0x36, 0x01, 0x0c, 0x02, 0x32, 0x01, 0x07, 0x01, 0x0c, 0x02, 0x0b, 0x01, 0x37, 0x01, 0x38, 0x01, 0x24, 0x01, 0x0c, 0x02, 0x1e, 0x01, 0x39, 0x01, 0x0c, 0x02, 0x3a, 0x01, 0x38, 0x01, 0x00, 0x01, 
	0x00, 0x01, 0x3b, 0x01, 0x0c, 0x02, 0x2a, 0x01, 0x16, 0x01, 0x0c, 0x02, 0x26, 0x01, 0x15, 0x01, 0x0c, 0x04, 0x19, 0x01, 0x1e, 0x01, 0x21, 0x01, 0x2d, 0x01, 0x00, 0x02, 
	0x00, 0x02, 0x2e, 0x01, 0x14, 0x01, 0x00, 0x01, 0x2d, 0x01, 0x37, 0x02, 0x35, 0x01, 0x00, 0x0b, 
	
}; // 20x22 Bitmap (440 pixels) in 618 bytes

const uint16_t db_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 60 entries
	0xd6fb, 0x94b2, 0x4a8a, 0x4a69, 0x52aa, 0x8c92, 0x3a08, 0x4249, 0x634d, 0xad96, 0x9d13, 0x0020, 0x0000, 0x10a2, 0x8cb2, 0x52cb, 
	0xd6db, 0x3186, 0x39e7, 0x73ef, 0xc659, 0x6b6d, 0x31a6, 0x4a49, 0xbe17, 0x0841, 0xce9a, 0x18e3, 0x9d34, 0x94d3, 0x2986, 0x0882, 
	0xbe18, 0x73ae, 0x8c71, 0x2124, 0x0861, 0x632c, 0x8430, 0x94f3, 0x8451, 0x2945, 0x5b0c, 0x8471, 0x1904, 0xc679, 0xbe38, 0x18c3, 
	0x73ce, 0xceda, 0x2965, 0x4228, 0xa554, 0xceba, 0x9d14, 0xbe58, 0xadb6, 0x39c7, 0x10c3, 0x5aeb, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_db_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(db_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(db_RLEBM_palette);
	bmInfo.width = 20;
	bmInfo.height = 22;
	bmInfo.flags = 0x00;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'pcnt.bmp'.
//

const byte pcnt_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x12, 0x13, 0x14, 0x60, 0x11, 0x13, 0x15, 0x20, 
	0x11, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x50, 0x13, 0x19, 0x15, 0x20, 
	0x18, 0x19, 0x1a, 0x11, 0x19, 0x16, 0x1b, 0x40, 0x27, 0x30, 
	0x1c, 0x19, 0x15, 0x10, 0x1c, 0x19, 0x1a, 0x30, 0x15, 0x19, 0x12, 0x30, 
	0x29, 0x14, 0x10, 0x16, 0x19, 0x1d, 0x30, 0x18, 0x1c, 0x1b, 0x30, 
	0x29, 0x14, 0x10, 0x16, 0x19, 0x1e, 0x20, 0x11, 0x19, 0x1e, 0x40, 
	0x29, 0x14, 0x10, 0x16, 0x19, 0x1e, 0x20, 0x1d, 0x19, 0x14, 0x40, 
	0x29, 0x14, 0x10, 0x16, 0x19, 0x1d, 0x20, 0x16, 0x1f, 0x50, 
	0x29, 0x14, 0x10, 0x1c, 0x19, 0x12, 0x10, 0x1a, 0x19, 0x1a, 0x50, 
	0x17, 0x19, 0x1a, 0x1b, 0x29, 0x14, 0x10, 0x1f, 0x16, 0x1b, 0x50, 
	0x12, 0x19, 0x1d, 0x14, 0x19, 0x18, 0x10, 0x14, 0x19, 0x1d, 0x60, 
	0x10, 0x13, 0x16, 0x1c, 0x18, 0x11, 0x10, 0x1e, 0x19, 0x11, 0x10, 0x1b, 0x1a, 0x15, 0x20, 
	0x60, 0x1b, 0x1c, 0x18, 0x10, 0x15, 0x16, 0x1f, 0x16, 0x17, 0x11, 
	0x60, 0x12, 0x19, 0x15, 0x1b, 0x16, 0x19, 0x1b, 0x12, 0x19, 0x1e, 
	0x60, 0x27, 0x10, 0x15, 0x19, 0x16, 0x10, 0x15, 0x19, 0x16, 
	0x50, 0x15, 0x19, 0x13, 0x10, 0x13, 0x19, 0x16, 0x10, 0x15, 0x29, 
	0x50, 0x18, 0x1c, 0x11, 0x10, 0x1e, 0x19, 0x16, 0x10, 0x15, 0x29, 
	0x40, 0x11, 0x1c, 0x1e, 0x20, 0x1e, 0x19, 0x16, 0x10, 0x15, 0x29, 
	0x40, 0x13, 0x19, 0x14, 0x20, 0x1d, 0x19, 0x16, 0x10, 0x15, 0x29, 
	0x40, 0x16, 0x1f, 0x30, 0x13, 0x19, 0x16, 0x10, 0x15, 0x29, 
	0x30, 0x1a, 0x19, 0x12, 0x30, 0x14, 0x19, 0x1c, 0x10, 0x1a, 0x19, 0x16, 
	0x30, 0x1f, 0x16, 0x1b, 0x40, 0x1f, 0x19, 0x11, 0x13, 0x19, 0x13, 
	0x20, 0x14, 0x19, 0x1d, 0x50, 0x11, 0x1f, 0x16, 0x1c, 0x1e, 0x10, 
	0x20, 0x15, 0x1d, 0x11, 0x70, 0x21, 0x20, 
	
}; // 16x24 Bitmap (384 pixels) in 261 bytes

const uint16_t pcnt_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xc659, 0x8430, 0x73cf, 0xadb6, 0xa554, 0x10a2, 0x2145, 0x4a69, 0x0000, 0x94d3, 0xceba, 0x0841, 0x634d, 0x5aeb, 0x31c7, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_pcnt_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(pcnt_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(pcnt_RLEBM_palette);
	bmInfo.width = 16;
	bmInfo.height = 24;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'v.bmp'.
//

const byte v_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x41, 0x12, 0x13, 0x12, 0x31, 0x10, 
	0x12, 0x31, 0x14, 0x15, 0x13, 0x16, 0x14, 0x21, 0x12, 
	0x13, 0x14, 0x21, 0x17, 0x33, 0x18, 0x11, 0x14, 0x13, 
	0x13, 0x19, 0x21, 0x14, 0x33, 0x1a, 0x11, 0x19, 0x13, 
	0x13, 0x18, 0x21, 0x10, 0x33, 0x1b, 0x11, 0x18, 0x13, 
	0x13, 0x16, 0x31, 0x1c, 0x23, 0x1d, 0x11, 0x16, 0x13, 
	0x23, 0x1e, 0x21, 0x12, 0x13, 0x16, 0x11, 0x1e, 0x23, 
	0x23, 0x1b, 0x21, 0x17, 0x13, 0x18, 0x11, 0x1b, 0x23, 
	0x23, 0x19, 0x21, 0x14, 0x13, 0x19, 0x11, 0x19, 0x23, 
	0x23, 0x18, 0x21, 0x10, 0x13, 0x1b, 0x11, 0x18, 0x23, 
	0x23, 0x16, 0x31, 0x1c, 0x1e, 0x11, 0x16, 0x23, 
	0x33, 0x1e, 0x21, 0x19, 0x11, 0x1e, 0x33, 
	0x33, 0x1b, 0x21, 0x1e, 0x11, 0x1b, 0x33, 
	0x33, 0x1a, 0x41, 0x1a, 0x33, 
	0x33, 0x1f, 0x41, 0x1f, 0x33, 
	0x33, 0x15, 0x31, 0x10, 0x15, 0x33, 
	0x43, 0x1d, 0x21, 0x1d, 0x43, 
	0x43, 0x17, 0x21, 0x17, 0x43, 
	0x43, 0x1a, 0x21, 0x1a, 0x43, 
	0x43, 0x1f, 0x21, 0x1f, 0x43, 
	0x43, 0x15, 0x20, 0x15, 0x43, 
	0x53, 0x2d, 0x53, 
	
}; // 12x22 Bitmap (264 pixels) in 154 bytes

const uint16_t v_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0x0020, 0x0000, 0x7c30, 0xd6fb, 0x31a6, 0xceba, 0xc659, 0x52cb, 0x94f3, 0x6b6d, 0x73cf, 0x4249, 0xb5d6, 0x2145, 0x18c3, 0xa554, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_v_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(v_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(v_RLEBM_palette);
	bmInfo.width = 12;
	bmInfo.height = 22;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt00.bmp'.
//

const byte batt00_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x34, 
	0x15, 0x06, 0x1f, 0x17, 0x13, 0x24, 
	0x18, 0x19, 0x10, 0x04, 0x1c, 0x1a, 0x17, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x28, 0x1c, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1e, 0x15, 0x1f, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x19, 0x10, 0x04, 0x1c, 0x1a, 0x17, 0x11, 0x24, 
	0x15, 0x06, 0x1f, 0x17, 0x13, 0x24, 
	0x10, 0x11, 0x02, 0x1e, 0x1a, 0x34, 
	
}; // 36x16 Bitmap (576 pixels) in 117 bytes

const uint16_t batt00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6db, 0xad95, 0xa555, 0xc659, 0xd6fb, 0x73ce, 0x0000, 0x0861, 0x4a8a, 0x5aeb, 0xc679, 0x18c3, 0x9cf3, 0x18e3, 0x6b6d, 0xadb6, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt00_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt20.bmp'.
//

const byte batt20_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x19, 0x00, 0x19, 0x13, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x18, 0x00, 0x1a, 0x1a, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1c, 0x13, 0x19, 0x00, 0x18, 0x1a, 0x10, 0x1b, 0x27, 0x1d, 
	0x17, 0x14, 0x10, 0x1c, 0x18, 0x19, 0x00, 0x18, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x1e, 0x14, 0x10, 0x1c, 0x1b, 0x2f, 0x00, 0x17, 0x1a, 0x10, 0x16, 0x1b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1d, 0x19, 0x00, 0x17, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1c, 0x00, 0x18, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x11, 0x19, 0x00, 0x16, 0x1a, 0x10, 0x1b, 0x18, 0x14, 0x11, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x17, 0x1f, 0x00, 0x16, 0x1a, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1e, 0x1b, 0x1c, 0x1e, 0x19, 0x1f, 0x00, 0x15, 0x13, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x1f, 0x11, 0x02, 0x1e, 0x1a, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 175 bytes

const uint16_t batt20_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe38, 0x73ce, 0x0000, 0x0861, 0x4a8a, 0x632c, 0xc699, 0xb5f7, 0x18c3, 0x2985, 0x94b2, 0x4228, 0xd6db, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt20_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt20_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt20_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt40.bmp'.
//

const byte batt40_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x17, 0x20, 
	0x18, 0x19, 0x00, 0x1d, 0x17, 0x16, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x11, 0x12, 0x1a, 0x48, 0x1b, 0x10, 0x0c, 0x12, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1e, 0x10, 0x1d, 0x45, 0x1d, 0x00, 0x13, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x00, 0x12, 0x13, 0x10, 0x1d, 0x28, 0x12, 
	0x18, 0x14, 0x10, 0x1f, 0x1e, 0x17, 0x16, 0x45, 0x1f, 0x00, 0x12, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x19, 0x14, 0x10, 0x1f, 0x1d, 0x1c, 0x18, 0x55, 0x13, 0x00, 0x11, 0x13, 0x10, 0x16, 0x1d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x15, 0x1b, 0x11, 0x55, 0x19, 0x00, 0x11, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x15, 0x1f, 0x10, 0x1f, 0x45, 0x16, 0x1c, 0x00, 0x10, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x00, 0x10, 0x13, 0x10, 0x1d, 0x1e, 0x14, 0x11, 
	0x18, 0x14, 0x10, 0x1f, 0x25, 0x18, 0x1c, 0x1d, 0x45, 0x1d, 0x00, 0x10, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1a, 0x1d, 0x1f, 0x1a, 0x1c, 0x1b, 0x5a, 0x11, 0xf0, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x19, 0x00, 0x1d, 0x17, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x17, 0x20, 
	0x1c, 0x11, 0x02, 0x1e, 0x17, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 204 bytes

const uint16_t batt40_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe18, 0x73ce, 0x0000, 0x0841, 0xc679, 0x4a8a, 0x52cb, 0x4228, 0x8cb2, 0xceba, 0x18c3, 0x636d, 0x2986, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt40_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt40_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt40_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt60.bmp'.
//

const byte batt60_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x13, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x19, 0x12, 0x1a, 0x47, 0x1b, 0x13, 0x18, 0x47, 0x18, 0xc0, 0x13, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1d, 0x1e, 0x1c, 0x45, 0x1c, 0x1e, 0x17, 0x55, 0x1b, 0xb0, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x12, 0x55, 0x1f, 0xb0, 0x19, 0x10, 0x1c, 0x18, 0x17, 0x12, 
	0x17, 0x14, 0x10, 0x1f, 0x1d, 0x13, 0x16, 0x45, 0x1f, 0x10, 0x1f, 0x55, 0x19, 0xa0, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x18, 0x14, 0x10, 0x1f, 0x1c, 0x1e, 0x17, 0x55, 0x19, 0x1b, 0x55, 0x18, 0xa0, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x15, 0x1b, 0x11, 0x55, 0x18, 0x1e, 0x16, 0x45, 0x16, 0x1e, 0x90, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x15, 0x1f, 0x10, 0x1f, 0x45, 0x16, 0x13, 0x1d, 0x55, 0x14, 0x90, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x19, 0x55, 0x1c, 0x90, 0x19, 0x10, 0x1c, 0x1d, 0x14, 0x19, 
	0x17, 0x14, 0x10, 0x1f, 0x25, 0x17, 0x1e, 0x1c, 0x45, 0x1c, 0x10, 0x1a, 0x55, 0x12, 0x80, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x2f, 0x1a, 0x13, 0x1b, 0x5a, 0x21, 0x5a, 0x1d, 0x80, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x13, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x1e, 0x11, 0x02, 0x1e, 0x19, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 228 bytes

const uint16_t batt60_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xc659, 0x73cf, 0x0000, 0x0841, 0x4a8a, 0x52ca, 0xb5d7, 0x4228, 0x8cb2, 0x18c3, 0x634d, 0xd6db, 0x2985, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt60_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt60_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt60_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt80.bmp'.
//

const byte batt80_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x20, 0x13, 0x20, 
	0x16, 0x17, 0x00, 0x1d, 0x18, 0x19, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x23, 0x14, 0x47, 0x1b, 0x18, 0x67, 0x10, 0x11, 0x57, 0x1c, 0x40, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x1d, 0x10, 0x16, 0x45, 0x16, 0x10, 0x14, 0x55, 0x11, 0x13, 0x55, 0x17, 0x40, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x1e, 0x1c, 0x1a, 0x55, 0x1b, 0x13, 0x55, 0x1f, 0x10, 0x1e, 0x45, 0x19, 0x18, 0x30, 0x18, 0x10, 0x36, 0x1a, 
	0x16, 0x1a, 0x10, 0x1e, 0x1d, 0x1c, 0x19, 0x45, 0x1f, 0x10, 0x1e, 0x55, 0x13, 0x11, 0x55, 0x12, 0x30, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x1e, 0x1a, 0x10, 0x1e, 0x16, 0x18, 0x17, 0x55, 0x13, 0x11, 0x55, 0x17, 0x18, 0x16, 0x45, 0x16, 0x30, 0x18, 0x10, 0x1e, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x15, 0x11, 0x13, 0x55, 0x17, 0x18, 0x19, 0x45, 0x19, 0x1c, 0x1d, 0x55, 0x1b, 0x20, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x15, 0x1e, 0x10, 0x1e, 0x45, 0x19, 0x18, 0x1d, 0x55, 0x1a, 0x1c, 0x55, 0x14, 0x20, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x25, 0x13, 0x11, 0x55, 0x12, 0x1c, 0x55, 0x16, 0x10, 0x14, 0x55, 0x1c, 0x10, 0x18, 0x10, 0x16, 0x1f, 0x14, 0x1b, 
	0x16, 0x1a, 0x10, 0x1e, 0x25, 0x17, 0x18, 0x16, 0x45, 0x16, 0x10, 0x14, 0x55, 0x2b, 0x55, 0x1d, 0x10, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x14, 0x1e, 0x1f, 0x14, 0x18, 0x11, 0x54, 0x23, 0x54, 0x1d, 0x10, 0x17, 0x44, 0x1f, 0x10, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x17, 0x00, 0x1d, 0x18, 0x19, 0x11, 0x20, 
	0x14, 0x05, 0x20, 0x13, 0x20, 
	0x18, 0x11, 0x02, 0x1e, 0x1c, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 257 bytes

const uint16_t batt80_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0x8471, 0x7c10, 0xad96, 0x4228, 0x0000, 0x18e3, 0x52aa, 0xce9a, 0x0841, 0x73ce, 0x94d3, 0xc659, 0x634d, 0x2965, 0x31c7, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt80_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt80_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt80_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt100.bmp'.
//

const byte batt100_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x22, 0x1a, 0x47, 0x1b, 0x13, 0x57, 0x18, 0x19, 0x14, 0x57, 0x11, 0x12, 0x17, 0x1a, 0x1c, 0x1b, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1e, 0x10, 0x1d, 0x45, 0x1d, 0x10, 0x17, 0x55, 0x1b, 0x11, 0x55, 0x18, 0x19, 0x16, 0x25, 0x14, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x12, 0x55, 0x1f, 0x10, 0x1c, 0x45, 0x16, 0x19, 0x1e, 0x25, 0x14, 0x10, 0x1d, 0x27, 0x12, 
	0x17, 0x14, 0x10, 0x1c, 0x1e, 0x19, 0x16, 0x45, 0x1f, 0x10, 0x1c, 0x55, 0x11, 0x1b, 0x55, 0x14, 0x13, 0x25, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x18, 0x14, 0x10, 0x1c, 0x1d, 0x10, 0x17, 0x55, 0x11, 0x1b, 0x55, 0x18, 0x19, 0x1d, 0x45, 0x1c, 0x10, 0x1a, 0x15, 0x14, 0x10, 0x16, 0x1d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1b, 0x11, 0x55, 0x18, 0x19, 0x16, 0x45, 0x16, 0x19, 0x1e, 0x55, 0x22, 0x15, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1f, 0x10, 0x1c, 0x45, 0x16, 0x19, 0x1e, 0x55, 0x14, 0x13, 0x55, 0x1a, 0x10, 0x1d, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x13, 0x55, 0x1d, 0x10, 0x1a, 0x55, 0x13, 0x24, 0x10, 0x1d, 0x1e, 0x14, 0x11, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x17, 0x10, 0x1d, 0x45, 0x1d, 0x10, 0x1a, 0x55, 0x1b, 0x12, 0x55, 0x1e, 0x19, 0x14, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x1c, 0x1f, 0x1a, 0x19, 0x1b, 0x5a, 0x21, 0x5a, 0x1e, 0x10, 0x18, 0x5a, 0x19, 0x12, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x19, 0x11, 0x02, 0x1e, 0x19, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 271 bytes

const uint16_t batt100_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe38, 0x73cf, 0x0000, 0x0841, 0x4a8a, 0x52cb, 0xce9a, 0x4228, 0x8c92, 0x2945, 0x18c3, 0x634d, 0x31a6, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt100_RLEBM(RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt100_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt100_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'walking.bmp'.
//

const byte walking_RLEBM_data[] PROGMEM_LATE = 
{
	0xb0, 0x11, 0x12, 0x13, 0x60, 
	0xa0, 0x14, 0x25, 0x16, 0x17, 0x50, 
	0x90, 0x18, 0x45, 0x16, 0x19, 0x40, 
	0x90, 0x1a, 0x55, 0x13, 0x40, 
	0x90, 0x18, 0x1b, 0x35, 0x1c, 0x50, 
	0xa0, 0x1a, 0x1d, 0x15, 0x1d, 0x11, 0x50, 
	0x70, 0x19, 0x1a, 0x1e, 0x1d, 0x1f, 0x17, 0x19, 0x60, 
	0x50, 0x1a, 0x1e, 0x1b, 0x55, 0x14, 0x60, 
	0x30, 0x14, 0x1b, 0x85, 0x1e, 0x60, 
	0x20, 0x12, 0x25, 0x16, 0x1f, 0x12, 0x1e, 0x45, 0x17, 0x18, 0x50, 
	0x20, 0x1d, 0x15, 0x1f, 0x18, 0x20, 0x1d, 0x45, 0x17, 0x14, 0x50, 
	0x10, 0x12, 0x15, 0x16, 0x13, 0x20, 0x18, 0x45, 0x1b, 0x14, 0x16, 0x18, 0x40, 
	0x10, 0x1d, 0x15, 0x1e, 0x30, 0x12, 0x45, 0x1e, 0x1f, 0x15, 0x1d, 0x13, 0x30, 
	0x17, 0x15, 0x16, 0x13, 0x30, 0x1e, 0x45, 0x17, 0x1a, 0x16, 0x15, 0x1c, 0x1a, 0x20, 
	0x1d, 0x15, 0x1e, 0x40, 0x1c, 0x45, 0x11, 0x10, 0x11, 0x1c, 0x15, 0x16, 0x12, 0x10, 
	0x1d, 0x16, 0x13, 0x30, 0x18, 0x45, 0x1b, 0x30, 0x18, 0x1d, 0x25, 0x14, 
	0x10, 0x19, 0x40, 0x11, 0x45, 0x1e, 0x40, 0x19, 0x1e, 0x15, 0x1b, 
	0x70, 0x1f, 0x35, 0x1e, 0x60, 0x12, 0x11, 
	0x70, 0x12, 0x14, 0x35, 0x1f, 0x19, 0x60, 
	0x60, 0x19, 0x16, 0x1f, 0x17, 0x16, 0x25, 0x1d, 0x13, 0x50, 
	0x60, 0x1a, 0x25, 0x14, 0x11, 0x1b, 0x25, 0x1b, 0x1a, 0x40, 
	0x60, 0x14, 0x25, 0x12, 0x10, 0x13, 0x1d, 0x25, 0x1b, 0x40, 
	0x50, 0x18, 0x1c, 0x25, 0x18, 0x20, 0x19, 0x1f, 0x25, 0x11, 0x30, 
	0x40, 0x19, 0x1d, 0x25, 0x1f, 0x40, 0x17, 0x25, 0x12, 0x30, 
	0x30, 0x19, 0x1f, 0x25, 0x1c, 0x18, 0x40, 0x1a, 0x25, 0x14, 0x30, 
	0x30, 0x1f, 0x25, 0x1c, 0x13, 0x50, 0x13, 0x25, 0x1e, 0x30, 
	0x20, 0x1e, 0x25, 0x1b, 0x13, 0x70, 0x16, 0x15, 0x1d, 0x30, 
	0x10, 0x12, 0x25, 0x16, 0x11, 0x80, 0x1d, 0x15, 0x1b, 0x30, 
	0x10, 0x1a, 0x15, 0x16, 0x1a, 0x90, 0x17, 0x1b, 0x14, 0x30, 
	0x20, 0x21, 0x00, 0x10, 
	
}; // 20x30 Bitmap (600 pixels) in 276 bytes

const uint16_t walking_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xb5d7, 0x94f3, 0xbe38, 0x73cf, 0x2104, 0x2945, 0x8c71, 0xc679, 0xceba, 0xad75, 0x3186, 0x39e7, 0x4248, 0x634c, 0x52cb, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_walking_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(walking_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(walking_RLEBM_palette);
	bmInfo.width = 20;
	bmInfo.height = 30;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_00.bmp'.
//

const byte act_00_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x33, 0x15, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x11, 0x17, 0x38, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x14, 0x11, 0x17, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x10, 0x14, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x38, 0x13, 0x10, 0x15, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x11, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x22, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x13, 0x10, 0x15, 0x48, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x48, 0x15, 0x10, 0x13, 0x19, 0x10, 
	0x10, 0x1a, 0x18, 0x22, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x11, 0x12, 0x19, 0x10, 
	0x10, 0x1a, 0x18, 0x15, 0x10, 0x13, 0x48, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x48, 0x14, 0x10, 0x16, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 330 bytes

const uint16_t act_00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 11 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0xb5d7, 0xbe58, 0xbe38, 0xa575, 0x9d34, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_00_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_01.bmp'.
//

const byte act_01_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x10, 0x11, 0x22, 0x15, 0x10, 
	0x10, 0x16, 0x11, 0x17, 0x38, 0x17, 0x15, 0x13, 0x48, 0x17, 0x10, 0x11, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x15, 0x13, 0x48, 0x17, 0x10, 0x11, 0x48, 0x13, 0x15, 0x17, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x11, 0x14, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x38, 0x12, 0x10, 0x14, 0x18, 0x19, 0x10, 
	0x10, 0x1b, 0x16, 0x13, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x21, 0x18, 0x19, 0x10, 
	0x10, 0x2b, 0x10, 0x14, 0x48, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x48, 0x14, 0x10, 0x12, 0x19, 0x10, 
	0x10, 0x1b, 0x1c, 0x19, 0x13, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x15, 0x11, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1d, 0x10, 0x12, 0x48, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x48, 0x13, 0x10, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 328 bytes

const uint16_t act_01_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 14 entries
	0xd6fb, 0xceba, 0xc659, 0xce9a, 0xc679, 0xd6db, 0x7c10, 0xbe58, 0xbe38, 0xa575, 0x39e7, 0x2965, 0x0841, 0x52aa, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_01_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_01_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_01_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_02.bmp'.
//

const byte act_02_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x11, 0x14, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x14, 0x17, 0x38, 0x17, 0x13, 0x15, 0x49, 0x1a, 0x11, 0x12, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x10, 0x14, 0x49, 0x1a, 0x11, 0x12, 0x49, 0x14, 0x11, 0x1a, 0x19, 0x1b, 0x10, 
	0x10, 0x1c, 0x14, 0x1d, 0x48, 0x16, 0x14, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x39, 0x13, 0x10, 0x15, 0x19, 0x1b, 0x10, 
	0x10, 0x1e, 0x16, 0x1b, 0x48, 0x1e, 0x11, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x22, 0x19, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x48, 0x1f, 0x14, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x49, 0x15, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x18, 0x2f, 0x48, 0x1c, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x11, 0x14, 0x1b, 0x10, 
	0x10, 0x1c, 0x17, 0x1d, 0x11, 0x1e, 0x47, 0x19, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x49, 0x15, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 329 bytes

const uint16_t act_02_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0x7bef, 0x0861, 0x0000, 0xbe38, 0xbe58, 0xad96, 0x39e7, 0x52cb, 0x2945, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_02_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_02_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_02_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_03.bmp'.
//

const byte act_03_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x33, 0x15, 0x11, 0x14, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x14, 0x17, 0x38, 0x17, 0x13, 0x19, 0x48, 0x17, 0x14, 0x12, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x4a, 0x13, 0x11, 0x14, 0x5a, 0x10, 0x14, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x14, 0x19, 0x48, 0x16, 0x1a, 0x58, 0x16, 0x12, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x4a, 0x13, 0x10, 0x15, 0x1a, 0x1b, 0x10, 
	0x10, 0x1d, 0x16, 0x1e, 0x48, 0x1d, 0x11, 0x1c, 0x48, 0x1d, 0x11, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x22, 0x1a, 0x1b, 0x10, 
	0x10, 0x2d, 0x10, 0x1c, 0x48, 0x1f, 0x1b, 0x58, 0x1b, 0x12, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x4a, 0x15, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1d, 0x18, 0x1b, 0x1f, 0x48, 0x1c, 0x11, 0x1d, 0x48, 0x1c, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x11, 0x14, 0x1b, 0x10, 
	0x10, 0x1c, 0x17, 0x19, 0x11, 0x1d, 0x47, 0x1e, 0x16, 0x57, 0x13, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x4a, 0x15, 0x10, 0x1e, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 314 bytes

const uint16_t act_03_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0x7bef, 0x0882, 0x0000, 0x52cb, 0xbe38, 0xa555, 0x39e7, 0x2145, 0xb5f7, 0x8cb2, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_03_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_03_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_03_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_04.bmp'.
//

const byte act_04_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x10, 0x11, 0x22, 0x15, 0x10, 
	0x10, 0x16, 0x13, 0x17, 0x38, 0x17, 0x12, 0x19, 0x48, 0x17, 0x14, 0x1a, 0x48, 0x17, 0x24, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x4b, 0x12, 0x10, 0x13, 0x5b, 0x15, 0x13, 0x5b, 0x10, 0x11, 0x4b, 0x13, 0x15, 0x2b, 0x1c, 0x10, 
	0x10, 0x1a, 0x11, 0x19, 0x48, 0x16, 0x1d, 0x58, 0x16, 0x1d, 0x58, 0x16, 0x13, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x4b, 0x12, 0x10, 0x14, 0x1b, 0x1c, 0x10, 
	0x10, 0x1a, 0x16, 0x1d, 0x48, 0x1e, 0x10, 0x1a, 0x48, 0x1e, 0x10, 0x1a, 0x48, 0x1e, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x21, 0x1b, 0x1c, 0x10, 
	0x10, 0x1a, 0x1e, 0x10, 0x1a, 0x48, 0x2c, 0x58, 0x2c, 0x58, 0x1c, 0x13, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x4b, 0x14, 0x10, 0x12, 0x1c, 0x10, 
	0x10, 0x1a, 0x18, 0x2c, 0x48, 0x1a, 0x10, 0x1e, 0x48, 0x1a, 0x10, 0x1e, 0x48, 0x1a, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x15, 0x11, 0x1c, 0x10, 
	0x10, 0x1a, 0x1f, 0x19, 0x15, 0x1e, 0x4f, 0x1d, 0x16, 0x5f, 0x1d, 0x16, 0x5f, 0x1b, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x4b, 0x13, 0x10, 0x1d, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 311 bytes

const uint16_t act_04_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc659, 0xce9a, 0xc679, 0xd6db, 0x7c0f, 0x0020, 0x0000, 0x52ca, 0x31c7, 0xbe38, 0x9d34, 0xb5f7, 0x2124, 0x1082, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_04_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_04_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_04_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_05.bmp'.
//

const byte act_05_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x10, 0x11, 0x22, 0x14, 0x10, 
	0x10, 0x15, 0x11, 0x16, 0x37, 0x16, 0x12, 0x15, 0x47, 0x16, 0x13, 0x18, 0x47, 0x16, 0x13, 0x15, 0x47, 0x16, 0x13, 0x69, 0x10, 0x11, 0x59, 0x10, 0x11, 0x59, 0x10, 0x11, 0x49, 0x12, 0x10, 0x11, 0x59, 0x14, 0x11, 0x59, 0x10, 0x13, 0x49, 0x11, 0x14, 0x29, 0x1a, 0x10, 
	0x10, 0x1b, 0x11, 0x1c, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x13, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x49, 0x12, 0x10, 0x13, 0x19, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1d, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x21, 0x19, 0x1a, 0x10, 
	0x10, 0x1b, 0x1e, 0x10, 0x1b, 0x47, 0x28, 0x57, 0x28, 0x57, 0x28, 0x57, 0x18, 0x12, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x49, 0x13, 0x10, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x17, 0x28, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x14, 0x11, 0x1a, 0x10, 
	0x10, 0x1b, 0x1f, 0x1c, 0x14, 0x1e, 0x4f, 0x1d, 0x15, 0x5f, 0x1d, 0x15, 0x5f, 0x1d, 0x15, 0x5f, 0x1d, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x49, 0x13, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 312 bytes

const uint16_t act_05_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc659, 0xc679, 0xd6db, 0x73cf, 0x0020, 0x0000, 0x9cf3, 0xbe38, 0xad95, 0x31c7, 0x4a69, 0xbe18, 0x2104, 0x1082, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_05_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_05_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_05_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_06.bmp'.
//

const byte act_06_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x10, 0x11, 0x22, 0x13, 0x10, 
	0x10, 0x14, 0x11, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x22, 0x58, 0x10, 0x11, 0x58, 0x10, 0x11, 0x48, 0x12, 0x10, 0x11, 0x58, 0x13, 0x11, 0x58, 0x10, 0x13, 0x48, 0x11, 0x13, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x11, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x11, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x48, 0x12, 0x10, 0x12, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x11, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x11, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x48, 0x12, 0x10, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x13, 0x11, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1e, 0x13, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 309 bytes

const uint16_t act_06_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc679, 0xd6db, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x39c7, 0xbe18, 0x2104, 0x4a69, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_06_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_06_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_06_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_07.bmp'.
//

const byte act_07_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x12, 0x13, 0x58, 0x11, 0x12, 0x48, 0x13, 0x11, 0x12, 0x58, 0x10, 0x12, 0x58, 0x21, 0x48, 0x12, 0x11, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x12, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x12, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x48, 0x13, 0x10, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x22, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x12, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x48, 0x13, 0x10, 0x13, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x11, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1e, 0x11, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_07_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x39c7, 0xbe18, 0x2104, 0x4a69, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_07_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_07_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_07_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_08.bmp'.
//

const byte act_08_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x15, 0x12, 0x16, 0x37, 0x18, 0x13, 0x19, 0x47, 0x18, 0x14, 0x15, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x22, 0x4a, 0x13, 0x11, 0x12, 0x5a, 0x10, 0x12, 0x5a, 0x21, 0x4a, 0x12, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x12, 0x19, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x13, 0x10, 0x14, 0x1a, 0x1b, 0x10, 
	0x10, 0x1e, 0x15, 0x1d, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x12, 0x11, 0x1a, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x47, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x1b, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x14, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x17, 0x2f, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x11, 0x12, 0x1b, 0x10, 
	0x10, 0x1c, 0x16, 0x19, 0x11, 0x1e, 0x46, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x14, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 318 bytes

const uint16_t act_08_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0x632c, 0xbe38, 0xad95, 0x39e7, 0xbe18, 0x2104, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_08_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_08_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_08_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_09.bmp'.
//

const byte act_09_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x15, 0x12, 0x16, 0x37, 0x18, 0x13, 0x19, 0x47, 0x18, 0x14, 0x15, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x57, 0x14, 0x13, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x14, 0x4a, 0x12, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x12, 0x19, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x14, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x13, 0x10, 0x14, 0x1a, 0x1b, 0x10, 
	0x10, 0x1e, 0x15, 0x1d, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x22, 0x1a, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x47, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x1f, 0x14, 0x5a, 0x22, 0x5a, 0x22, 0x4a, 0x14, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x17, 0x2f, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x11, 0x12, 0x1b, 0x10, 
	0x10, 0x1c, 0x16, 0x19, 0x11, 0x1e, 0x46, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 315 bytes

const uint16_t act_09_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc659, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0x632c, 0xbe38, 0xad95, 0x39e7, 0xbe18, 0x2104, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_09_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_09_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_09_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_10.bmp'.
//

const byte act_10_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x13, 0x14, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x56, 0x13, 0x19, 0x46, 0x17, 0x13, 0x12, 0x58, 0x11, 0x13, 0x48, 0x12, 0x11, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x12, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x12, 0x58, 0x12, 0x11, 0x48, 0x13, 0x10, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x22, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x12, 0x58, 0x22, 0x48, 0x13, 0x10, 0x13, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x11, 0x12, 0x1a, 0x10, 
	0x10, 0x1e, 0x15, 0x19, 0x11, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x12, 0x58, 0x11, 0x12, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 307 bytes

const uint16_t act_10_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x31a6, 0xbe18, 0x2104, 0x4208, 0x9d13, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_10_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_10_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_10_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_11.bmp'.
//

const byte act_11_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x10, 0x11, 0x22, 0x20, 
	0x10, 0x13, 0x11, 0x14, 0x35, 0x16, 0x17, 0x18, 0x45, 0x16, 0x12, 0x13, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x55, 0x12, 0x18, 0x45, 0x16, 0x17, 0x18, 0x45, 0x16, 0x12, 0x57, 0x11, 0x10, 0x27, 0x19, 0x10, 
	0x10, 0x1a, 0x11, 0x18, 0x45, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x12, 0x47, 0x12, 0x10, 0x12, 0x17, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1b, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x12, 0x47, 0x21, 0x17, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x10, 0x1a, 0x45, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x1f, 0x12, 0x47, 0x12, 0x10, 0x12, 0x19, 0x10, 
	0x10, 0x1a, 0x15, 0x2f, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x12, 0x47, 0x10, 0x11, 0x19, 0x10, 
	0x10, 0x1e, 0x14, 0x18, 0x10, 0x1d, 0x44, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x11, 0x47, 0x11, 0x10, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_11_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xce9a, 0xc679, 0x73cf, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x31a6, 0xbe18, 0x8450, 0x2104, 0x4208, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_11_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_11_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_11_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_12.bmp'.
//

const byte act_12_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x12, 0x18, 0x46, 0x17, 0x13, 0x14, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x56, 0x13, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x13, 0x14, 0x46, 0x14, 0x33, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x18, 0x46, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x46, 0x15, 0x11, 0x2b, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1b, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1f, 0x2b, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x10, 0x1a, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x46, 0x1a, 0x10, 0x13, 0x19, 0x10, 
	0x10, 0x1a, 0x16, 0x2f, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x19, 0x1b, 0x19, 0x10, 
	0x10, 0x1e, 0x15, 0x18, 0x11, 0x1d, 0x45, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x45, 0x18, 0x12, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_12_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc679, 0x73cf, 0x1082, 0x0000, 0x0020, 0x632c, 0xad96, 0x31a6, 0xbe18, 0x8450, 0x2104, 0x4208, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_12_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_12_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_12_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_13.bmp'.
//

const byte act_13_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x13, 0x18, 0x46, 0x17, 0x12, 0x14, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x56, 0x12, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x12, 0x14, 0x46, 0x14, 0x13, 0x17, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x18, 0x46, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x46, 0x15, 0x11, 0x1c, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x1b, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1f, 0x19, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x1e, 0x10, 0x1a, 0x46, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x46, 0x1a, 0x10, 0x1e, 0x19, 0x10, 
	0x10, 0x1a, 0x16, 0x19, 0x1f, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1b, 0x1d, 0x19, 0x10, 
	0x10, 0x1c, 0x15, 0x18, 0x11, 0x1e, 0x45, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x45, 0x18, 0x12, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 320 bytes

const uint16_t act_13_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce99, 0xc659, 0x73cf, 0x1082, 0x0000, 0x0020, 0x632c, 0x9d34, 0x31a6, 0xbe17, 0x4208, 0x8450, 0x2104, 0x94f3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_13_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_13_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_13_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi00.bmp'.
//

const byte wifi00_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x12, 0x11, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x18, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x14, 0x07, 0x13, 0x16, 0x14, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x18, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x24, 0x28, 0x24, 0x15, 0x16, 0xb7, 0x15, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x18, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x18, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x11, 0x18, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x15, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x14, 0x67, 0x16, 0x18, 0x11, 0x00, 0x1a, 0x11, 0x18, 0x77, 0x14, 0x11, 0x10, 
	0x11, 0x14, 0x67, 0x15, 0x11, 0xc0, 0x21, 0x32, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x14, 0x11, 
	0x11, 0x15, 0x57, 0x18, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x18, 0x12, 0x11, 0x90, 0x14, 0x57, 0x15, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x11, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x11, 0x14, 0x07, 0x14, 0x14, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x15, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x12, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x12, 0x14, 0x15, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x12, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x15, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xb0, 0x21, 0xb0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x13, 0x80, 0x12, 0x18, 0x15, 0x16, 0x27, 0x16, 0x15, 0x18, 0x12, 0x80, 0x18, 0x11, 0xa0, 
	0x00, 0x12, 0x12, 0x15, 0xa7, 0x15, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x11, 0x14, 0xe7, 0x14, 0x11, 0x00, 0x10, 
	0xf0, 0x11, 0x14, 0x07, 0x10, 0x15, 0x11, 0xf0, 
	0xf0, 0x14, 0x87, 0x26, 0x87, 0x14, 0xf0, 
	0xf0, 0x11, 0x15, 0x47, 0x14, 0x13, 0x11, 0x20, 0x11, 0x13, 0x15, 0x47, 0x15, 0x11, 0xf0, 
	0x00, 0x10, 0x11, 0x15, 0x17, 0x16, 0x12, 0x80, 0x12, 0x15, 0x17, 0x15, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x11, 0x14, 0x11, 0xa0, 0x11, 0x14, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x18, 0x22, 0x00, 0x18, 
	0x00, 0x16, 0x11, 0x15, 0x27, 0x15, 0x12, 0x00, 0x16, 
	0x00, 0x16, 0x14, 0x47, 0x14, 0x00, 0x16, 
	0x00, 0x16, 0x11, 0x15, 0x27, 0x15, 0x11, 0x00, 0x16, 
	0x00, 0x17, 0x11, 0x25, 0x11, 0x00, 0x17, 
	0x00, 0x18, 0x21, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 432 bytes

const uint16_t wifi00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 9 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xc699, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi00_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi25.bmp'.
//

const byte wifi25_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x22, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x14, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x15, 0x07, 0x13, 0x16, 0x15, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x14, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x64, 0x15, 0x16, 0xb7, 0x15, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x14, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x14, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x12, 0x14, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x15, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x15, 0x67, 0x16, 0x14, 0x11, 0x00, 0x1a, 0x11, 0x14, 0x77, 0x15, 0x11, 0x10, 
	0x11, 0x15, 0x67, 0x15, 0x12, 0xc0, 0x11, 0x42, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x15, 0x11, 
	0x11, 0x15, 0x57, 0x14, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x14, 0x12, 0x11, 0x90, 0x14, 0x57, 0x15, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x12, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x12, 0x14, 0x07, 0x14, 0x15, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x15, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x12, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x12, 0x14, 0x15, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x12, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x15, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xb0, 0x21, 0xb0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x14, 0x80, 0x12, 0x14, 0x15, 0x16, 0x27, 0x16, 0x15, 0x14, 0x12, 0x80, 0x14, 0x11, 0xa0, 
	0x00, 0x12, 0x12, 0x15, 0xa7, 0x15, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x11, 0x14, 0xe7, 0x14, 0x11, 0x00, 0x10, 
	0xf0, 0x11, 0x15, 0x07, 0x10, 0x15, 0x11, 0xf0, 
	0xf0, 0x14, 0x87, 0x26, 0x87, 0x15, 0xf0, 
	0xf0, 0x11, 0x15, 0x47, 0x15, 0x13, 0x11, 0x20, 0x11, 0x13, 0x15, 0x47, 0x15, 0x11, 0xf0, 
	0x00, 0x10, 0x11, 0x15, 0x17, 0x16, 0x12, 0x80, 0x12, 0x15, 0x17, 0x15, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x11, 0x15, 0x12, 0xa0, 0x12, 0x15, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x28, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x18, 0x19, 0x2a, 0x19, 0x18, 0x00, 0x16, 
	0x00, 0x16, 0x1b, 0x4a, 0x1b, 0x00, 0x16, 
	0x00, 0x16, 0x17, 0x19, 0x2a, 0x19, 0x1c, 0x00, 0x16, 
	0x00, 0x17, 0x1c, 0x29, 0x1c, 0x00, 0x17, 
	0x00, 0x18, 0x27, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 431 bytes

const uint16_t wifi25_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 13 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xa554, 0x18c3, 0x0000, 0x31a6, 0xbe18, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi25_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi25_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi25_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi50.bmp'.
//

const byte wifi50_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x22, 0x00, 0x14, 
	0xf0, 0x11, 0x13, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x14, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x15, 0x07, 0x13, 0x16, 0x15, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x14, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x64, 0x15, 0x16, 0xb7, 0x16, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x14, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x14, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x12, 0x14, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x16, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x15, 0x67, 0x16, 0x14, 0x11, 0x00, 0x1a, 0x11, 0x14, 0x77, 0x15, 0x11, 0x10, 
	0x11, 0x15, 0x67, 0x15, 0x12, 0xc0, 0x11, 0x42, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x15, 0x11, 
	0x11, 0x15, 0x57, 0x14, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x14, 0x12, 0xa0, 0x14, 0x57, 0x16, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x12, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x12, 0x14, 0x07, 0x14, 0x15, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x16, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x13, 0x14, 0x16, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x13, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x16, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xa0, 0x11, 0x24, 0x11, 0xa0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x14, 0x70, 0x11, 0x18, 0x19, 0x1a, 0x1b, 0x2c, 0x1b, 0x1d, 0x19, 0x18, 0x11, 0x70, 0x14, 0x11, 0xa0, 
	0x00, 0x12, 0x1e, 0x1a, 0xac, 0x1a, 0x18, 0x00, 0x12, 
	0x00, 0x10, 0x13, 0x19, 0xec, 0x19, 0x14, 0x00, 0x10, 
	0xf0, 0x15, 0x1d, 0x0c, 0x10, 0x1a, 0x17, 0xf0, 
	0xf0, 0x19, 0x8c, 0x1b, 0x9c, 0x1d, 0xf0, 
	0xf0, 0x17, 0x1a, 0x4c, 0x1d, 0x1e, 0x17, 0x21, 0x17, 0x1e, 0x1d, 0x4c, 0x1a, 0x17, 0xf0, 
	0x00, 0x10, 0x17, 0x1a, 0x1c, 0x1b, 0x1e, 0x80, 0x1e, 0x1b, 0x1c, 0x1d, 0x17, 0x00, 0x10, 
	0x00, 0x11, 0x16, 0x1d, 0x18, 0xa0, 0x18, 0x1d, 0x17, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x28, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x18, 0x1a, 0x2c, 0x1a, 0x18, 0x00, 0x16, 
	0x00, 0x16, 0x1d, 0x4c, 0x1d, 0x00, 0x16, 
	0x00, 0x16, 0x17, 0x1a, 0x2c, 0x1a, 0x17, 0x00, 0x16, 
	0x00, 0x17, 0x17, 0x2a, 0x17, 0x00, 0x17, 
	0x00, 0x18, 0x27, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 434 bytes

const uint16_t wifi50_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 15 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xa555, 0x4a8a, 0x18e3, 0x0020, 0x0000, 0x2965, 0x8c91, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi50_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi50_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi50_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi75.bmp'.
//

const byte wifi75_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x82, 0x11, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x23, 0xc4, 0x23, 0x12, 0x00, 0x10, 
	0xc0, 0x11, 0x12, 0x13, 0x04, 0x14, 0x13, 0x12, 0xd0, 
	0xa0, 0x11, 0x13, 0x04, 0x1a, 0x13, 0x11, 0xa0, 
	0x80, 0x11, 0x13, 0x04, 0x1e, 0x12, 0x90, 
	0x70, 0x12, 0xd4, 0x83, 0xd4, 0x12, 0x70, 
	0x50, 0x11, 0x13, 0x94, 0x23, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x23, 0x94, 0x13, 0x11, 0x50, 
	0x40, 0x12, 0x94, 0x13, 0x11, 0x00, 0x12, 0x11, 0x13, 0x94, 0x12, 0x40, 
	0x30, 0x13, 0x84, 0x12, 0x00, 0x18, 0x12, 0x84, 0x13, 0x30, 
	0x20, 0x13, 0x74, 0x13, 0x00, 0x1c, 0x13, 0x74, 0x13, 0x20, 
	0x10, 0x13, 0x64, 0x13, 0x11, 0xb0, 0x12, 0x15, 0x16, 0x27, 0x16, 0x15, 0x11, 0xb0, 0x11, 0x13, 0x64, 0x13, 0x10, 
	0x11, 0x13, 0x54, 0x13, 0x90, 0x12, 0x18, 0x19, 0x1a, 0x7b, 0x1c, 0x1a, 0x19, 0x17, 0x11, 0x90, 0x13, 0x64, 0x11, 
	0x10, 0x11, 0x13, 0x34, 0x12, 0x80, 0x16, 0x19, 0x1c, 0xeb, 0x1c, 0x19, 0x17, 0x80, 0x12, 0x34, 0x13, 0x11, 0x10, 
	0x20, 0x11, 0x13, 0x14, 0x12, 0x70, 0x16, 0x1d, 0x0b, 0x14, 0x1d, 0x16, 0x70, 0x12, 0x14, 0x13, 0x11, 0x20, 
	0x40, 0x12, 0x60, 0x13, 0x19, 0x0b, 0x17, 0x1c, 0x1e, 0x12, 0x60, 0x12, 0x11, 0x30, 
	0xa0, 0x17, 0x1f, 0xab, 0x1c, 0x1f, 0x2a, 0x1f, 0x1c, 0xab, 0x1f, 0x16, 0xa0, 
	0x90, 0x18, 0x1c, 0x7b, 0x1c, 0x19, 0x18, 0x15, 0x60, 0x15, 0x18, 0x19, 0x1c, 0x7b, 0x1c, 0x18, 0x90, 
	0x80, 0x18, 0x7b, 0x1f, 0x1e, 0x12, 0xc0, 0x12, 0x18, 0x1f, 0x7b, 0x1e, 0x80, 
	0x70, 0x12, 0x1a, 0x5b, 0x1c, 0x1e, 0x12, 0x00, 0x10, 0x11, 0x1e, 0x1c, 0x5b, 0x1f, 0x12, 0x70, 
	0x80, 0x15, 0x1a, 0x3b, 0x1a, 0x15, 0x00, 0x14, 0x16, 0x1a, 0x3b, 0x1f, 0x15, 0x80, 
	0x90, 0x14, 0x1a, 0x1b, 0x1d, 0x12, 0x90, 0x11, 0x23, 0xa0, 0x12, 0x19, 0x1b, 0x1f, 0x15, 0x90, 
	0xa0, 0x13, 0x1e, 0x11, 0x70, 0x17, 0x19, 0x1a, 0x1c, 0x2b, 0x1c, 0x1a, 0x19, 0x17, 0x70, 0x11, 0x19, 0x15, 0xa0, 
	0x00, 0x12, 0x17, 0x1a, 0xab, 0x1f, 0x17, 0x00, 0x12, 
	0x00, 0x10, 0x12, 0x19, 0xeb, 0x19, 0x13, 0x00, 0x10, 
	0xf0, 0x13, 0x1a, 0x0b, 0x10, 0x1f, 0x15, 0xf0, 
	0xf0, 0x19, 0x0b, 0x12, 0x1d, 0xf0, 
	0xf0, 0x14, 0x1f, 0x4b, 0x1a, 0x18, 0x15, 0x10, 0x11, 0x15, 0x18, 0x1a, 0x4b, 0x1f, 0x14, 0xf0, 
	0x00, 0x10, 0x14, 0x1f, 0x1b, 0x1c, 0x18, 0x80, 0x17, 0x1c, 0x1b, 0x1a, 0x15, 0x00, 0x10, 
	0x00, 0x11, 0x14, 0x1d, 0x16, 0xa0, 0x16, 0x1d, 0x14, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x27, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x16, 0x1f, 0x2b, 0x1f, 0x17, 0x00, 0x16, 
	0x00, 0x16, 0x1d, 0x4b, 0x1d, 0x00, 0x16, 
	0x00, 0x16, 0x14, 0x1f, 0x2b, 0x1f, 0x15, 0x00, 0x16, 
	0x00, 0x17, 0x15, 0x2f, 0x15, 0x00, 0x17, 
	0x00, 0x18, 0x15, 0x14, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 412 bytes

const uint16_t wifi75_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc679, 0xbe38, 0xbe18, 0xad96, 0x94f3, 0x8451, 0x4a8a, 0x2145, 0x0000, 0x0841, 0x31a6, 0x73ae, 0x18e3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi75_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi75_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi75_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi100.bmp'.
//

const byte wifi100_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x12, 0x13, 0x44, 0x23, 0x15, 0x16, 0x00, 0x13, 
	0xf0, 0x17, 0x13, 0x18, 0x19, 0x1a, 0xbb, 0x19, 0x18, 0x12, 0x16, 0xf0, 
	0xc0, 0x17, 0x14, 0x19, 0x0b, 0x13, 0x1a, 0x1c, 0x14, 0x17, 0xc0, 
	0xa0, 0x11, 0x18, 0x1a, 0x0b, 0x18, 0x1a, 0x18, 0x17, 0xa0, 
	0x80, 0x11, 0x1d, 0x0b, 0x1d, 0x1a, 0x1e, 0x17, 0x80, 
	0x60, 0x16, 0x1e, 0x1a, 0xbb, 0x1a, 0x19, 0x2d, 0x38, 0x1d, 0x19, 0x1a, 0xbb, 0x1f, 0x14, 0x16, 0x60, 
	0x50, 0x11, 0x19, 0x9b, 0x1f, 0x18, 0x13, 0x11, 0xa0, 0x11, 0x13, 0x18, 0x1f, 0x9b, 0x1f, 0x15, 0x50, 
	0x40, 0x14, 0x1a, 0x7b, 0x1a, 0x18, 0x15, 0x00, 0x12, 0x15, 0x18, 0x1a, 0x7b, 0x1a, 0x14, 0x40, 
	0x20, 0x16, 0x1d, 0x7b, 0x1a, 0x1e, 0x17, 0x00, 0x16, 0x17, 0x14, 0x1a, 0x7b, 0x1d, 0x16, 0x20, 
	0x10, 0x17, 0x1c, 0x7b, 0x18, 0x17, 0x00, 0x1a, 0x16, 0x18, 0x7b, 0x1c, 0x17, 0x10, 
	0x16, 0x1c, 0x6b, 0x19, 0x15, 0xb0, 0x16, 0x11, 0x15, 0x22, 0x15, 0x11, 0x16, 0xb0, 0x15, 0x19, 0x6b, 0x19, 0x16, 
	0x11, 0x1f, 0x5b, 0x18, 0x90, 0x17, 0x13, 0x18, 0x19, 0x1a, 0x6b, 0x1a, 0x19, 0x18, 0x13, 0x90, 0x16, 0x18, 0x5b, 0x19, 0x17, 
	0x10, 0x17, 0x1f, 0x3b, 0x14, 0x80, 0x15, 0x1d, 0x1a, 0xeb, 0x1a, 0x1d, 0x15, 0x80, 0x14, 0x3b, 0x1f, 0x11, 0x10, 
	0x20, 0x11, 0x1f, 0x1a, 0x13, 0x70, 0x15, 0x1d, 0x0b, 0x14, 0x1c, 0x15, 0x70, 0x13, 0x1a, 0x1f, 0x11, 0x20, 
	0x30, 0x17, 0x12, 0x60, 0x17, 0x18, 0x0b, 0x17, 0x1a, 0x1e, 0x16, 0x60, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x1f, 0xab, 0x1a, 0x1f, 0x29, 0x1f, 0x1a, 0xab, 0x1f, 0x15, 0xa0, 
	0x90, 0x13, 0x1a, 0x7b, 0x1a, 0x1d, 0x13, 0x11, 0x60, 0x11, 0x13, 0x18, 0x1a, 0x7b, 0x1a, 0x13, 0x90, 
	0x80, 0x14, 0x7b, 0x1f, 0x14, 0x16, 0xc0, 0x16, 0x13, 0x19, 0x7b, 0x14, 0x80, 
	0x70, 0x16, 0x19, 0x5b, 0x1a, 0x14, 0x16, 0x00, 0x10, 0x16, 0x14, 0x1a, 0x5b, 0x1f, 0x16, 0x70, 
	0x80, 0x11, 0x19, 0x3b, 0x19, 0x11, 0x00, 0x14, 0x11, 0x19, 0x3b, 0x19, 0x11, 0x80, 
	0x90, 0x17, 0x19, 0x1b, 0x1c, 0x16, 0xa0, 0x27, 0xa0, 0x16, 0x1d, 0x1b, 0x1f, 0x11, 0x90, 
	0xa0, 0x17, 0x1e, 0x16, 0x70, 0x12, 0x18, 0x19, 0x1a, 0x2b, 0x1a, 0x19, 0x18, 0x12, 0x70, 0x16, 0x18, 0x11, 0xa0, 
	0x00, 0x12, 0x13, 0x19, 0xab, 0x1f, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x16, 0x1d, 0xeb, 0x18, 0x17, 0x00, 0x10, 
	0xf0, 0x17, 0x19, 0x0b, 0x10, 0x1f, 0x11, 0xf0, 
	0xf0, 0x1d, 0x8b, 0x1a, 0x9b, 0x1c, 0xf0, 
	0xf0, 0x11, 0x1f, 0x4b, 0x19, 0x14, 0x11, 0x20, 0x11, 0x14, 0x19, 0x4b, 0x1f, 0x11, 0xf0, 
	0x00, 0x10, 0x17, 0x1f, 0x1b, 0x1a, 0x13, 0x80, 0x13, 0x1a, 0x1b, 0x19, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x17, 0x1c, 0x15, 0xa0, 0x15, 0x1c, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x16, 0x22, 0x16, 0x00, 0x17, 
	0x00, 0x16, 0x15, 0x1f, 0x2b, 0x1f, 0x15, 0x00, 0x16, 
	0x00, 0x16, 0x1c, 0x4b, 0x1c, 0x00, 0x16, 
	0x00, 0x16, 0x11, 0x1f, 0x2b, 0x1f, 0x11, 0x00, 0x16, 
	0x00, 0x17, 0x11, 0x2f, 0x11, 0x00, 0x17, 
	0x00, 0x18, 0x21, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 452 bytes

const uint16_t wifi100_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xbe18, 0x9d14, 0x8c91, 0x7bef, 0xa575, 0xceba, 0xc679, 0x52cb, 0x2145, 0x0020, 0x0000, 0x31a6, 0x4a49, 0x634d, 0x18e3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi100_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi100_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi100_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}
